{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "class Index extends App.Controller\n  constructor: ->\n    super\n    @authenticateCheckRedirect()\n    @verifyCall()\n\n  verifyCall: =>\n    @ajax(\n      id:          'email_verify'\n      type:        'POST'\n      url:         \"#{@apiPath}/users/email_verify\"\n      data:        JSON.stringify(token: @token)\n      processData: true\n      success:     @success\n      error:       @error\n    )\n\n  success: =>\n    new Success(el: @el)\n\n  error: =>\n    new Fail(el: @el)\n\nclass Success extends App.ControllerContent\n  constructor: ->\n    super\n    @render()\n\n    # rerender view, e. g. on language change\n    @bind 'ui:rerender', =>\n      @render()\n\n  render: =>\n    @renderScreenSuccess(\n      detail: 'Woo hoo! Your email address has been verified!'\n    )\n    delay = =>\n      @navigate '#'\n    @delay(delay, 20500)\n\nclass Fail extends App.ControllerContent\n  constructor: ->\n    super\n    @render()\n\n    # rerender view, e. g. on language change\n    @bind 'ui:rerender', =>\n      @render()\n\n  render: =>\n    @renderScreenError(\n      detail: 'Unable to verify email. Please contact your administrator.'\n    )\n\nApp.Config.set('email_verify/:token', Index, 'Routes')\n"}, {"role": "assistant", "content": "class Index extends App.Controller\n  constructor: ->\n    super\n    @verifyCall()\n\n  verifyCall: =>\n    @ajax(\n      id:          'email_verify'\n      type:        'POST'\n      url:         \"#{@apiPath}/users/email_verify\"\n      data:        JSON.stringify(token: @token)\n      processData: true\n      success: (data, status, xhr) =>\n        App.Auth.loginCheck()\n        @navigate '#'\n\n        @notify\n          type:      'success'\n          msg:       App.i18n.translateContent('Woo hoo! Your email address has been verified!')\n          removeAll: true\n          timeout: 2000\n\n      error: (data, status, xhr) =>\n        @navigate '#'\n\n        @notify\n          type:      'error'\n          msg:       App.i18n.translateContent('Unable to verify email. Please contact your administrator.')\n          removeAll: true\n    )\n\nApp.Config.set('email_verify/:token', Index, 'Routes')\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# Copyright (C) 2012-2016 Zammad Foundation, http://zammad-foundation.org/\n\nclass Auth\n  class Internal < Auth::Base\n\n    def valid?(user, password)\n\n      return false if user.blank?\n\n      if PasswordHash.legacy?(user.password, password)\n        update_password(user, password)\n        return true\n      end\n\n      PasswordHash.verified?(user.password, password)\n    end\n\n    private\n\n    def update_password(user, password)\n      user.password = PasswordHash.crypt(password)\n      user.save\n    end\n  end\nend\n"}, {"role": "assistant", "content": "# Copyright (C) 2012-2016 Zammad Foundation, http://zammad-foundation.org/\n\nclass Auth\n  class Internal < Auth::Base\n\n    def valid?(user, password)\n\n      return false if user.blank?\n\n      if PasswordHash.legacy?(user.password, password)\n        update_password(user, password)\n        return true\n      end\n\n      password_verified = PasswordHash.verified?(user.password, password)\n\n      raise Exceptions::NotAuthorized, 'Please verify your account before you can login!' if !user.verified && user.source == 'signup' && password_verified\n\n      password_verified\n    end\n\n    private\n\n    def update_password(user, password)\n      user.password = PasswordHash.crypt(password)\n      user.save\n    end\n  end\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "class Controllers::TicketsControllerPolicy < Controllers::ApplicationControllerPolicy\n  permit! %i[import_example import_start], to: 'admin'\n  permit! :selector, to: 'admin.*'\n  permit! :create, to: ['ticket.agent', 'ticket.customer']\nend\n"}, {"role": "assistant", "content": "class Controllers::TicketsControllerPolicy < Controllers::ApplicationControllerPolicy\n  permit! %i[import_example import_start], to: 'admin'\n  permit! :selector, to: 'admin.*'\n  permit! %i[ticket_customer ticket_history ticket_related ticket_recent ticket_merge ticket_split], to: 'ticket.agent'\n  permit! :create, to: ['ticket.agent', 'ticket.customer']\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "FactoryBot.define do\n  factory :role do\n    sequence(:name) { |n| \"TestRole#{n}\" }\n    created_by_id   { 1 }\n    updated_by_id   { 1 }\n\n    factory :agent_role do\n      permissions { Permission.where(name: 'ticket.agent') }\n    end\n\n    trait :admin do\n      permissions { Permission.where(name: 'admin') }\n    end\n  end\nend\n"}, {"role": "assistant", "content": "FactoryBot.define do\n  factory :role do\n    sequence(:name) { |n| \"TestRole#{n}\" }\n    created_by_id   { 1 }\n    updated_by_id   { 1 }\n\n    factory :agent_role do\n      permissions { Permission.where(name: 'ticket.agent') }\n    end\n\n    trait :customer do\n      permissions { Permission.where(name: 'ticket.customer') }\n    end\n\n    trait :admin do\n      permissions { Permission.where(name: 'admin') }\n    end\n  end\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# Deployed apps should consider commenting this line out:\n# see https://npmjs.org/doc/faq.html#Should-I-check-my-node_modules-folder-into-git\nnode_modules\n\nlib-cov/\ncoverage.json\n"}, {"role": "assistant", "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# Deployed apps should consider commenting this line out:\n# see https://npmjs.org/doc/faq.html#Should-I-check-my-node_modules-folder-into-git\nnode_modules\n\nlib-cov/\ncoverage.json\n.vs-code\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\"\"\" Regenerate golden-master \"\"\"\nimport shutil\nfrom pathlib import Path\n\nfrom typer.testing import CliRunner\n\nfrom openapi_python_client.cli import app\n\nif __name__ == \"__main__\":\n    from .fastapi_app import generate_openapi_json\n\n    generate_openapi_json()\n    runner = CliRunner()\n    openapi_path = Path(__file__).parent / \"fastapi_app\" / \"openapi.json\"\n    gm_path = Path(__file__).parent / \"golden-master\"\n    shutil.rmtree(gm_path, ignore_errors=True)\n    output_path = Path.cwd() / \"my-test-api-client\"\n    shutil.rmtree(output_path, ignore_errors=True)\n    config_path = Path(__file__).parent / \"config.yml\"\n\n    result = runner.invoke(app, [f\"--config={config_path}\", \"generate\", f\"--path={openapi_path}\"])\n    if result.stdout:\n        print(result.stdout)\n    if result.exception:\n        raise result.exception\n    output_path.rename(gm_path)\n"}, {"role": "assistant", "content": "\"\"\" Regenerate golden-master \"\"\"\nimport shutil\nfrom pathlib import Path\n\nfrom typer.testing import CliRunner\n\nfrom openapi_python_client.cli import app\n\nif __name__ == \"__main__\":\n    runner = CliRunner()\n    openapi_path = Path(__file__).parent / \"fastapi_app\" / \"openapi.json\"\n    gm_path = Path(__file__).parent / \"golden-master\"\n    shutil.rmtree(gm_path, ignore_errors=True)\n    output_path = Path.cwd() / \"my-test-api-client\"\n    shutil.rmtree(output_path, ignore_errors=True)\n    config_path = Path(__file__).parent / \"config.yml\"\n\n    result = runner.invoke(app, [f\"--config={config_path}\", \"generate\", f\"--path={openapi_path}\"])\n    if result.stdout:\n        print(result.stdout)\n    if result.exception:\n        raise result.exception\n    output_path.rename(gm_path)\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "import re\n\nimport stringcase\n\n\ndef snake_case(value: str) -> str:\n    value = re.sub(r\"([A-Z]{2,})([A-Z][a-z]|[ -_]|$)\", lambda m: m.group(1).title() + m.group(2), value.strip())\n    value = re.sub(r\"(^|[ _-])([A-Z])\", lambda m: m.group(1) + m.group(2).lower(), value)\n    return stringcase.snakecase(value)\n\n\ndef pascal_case(value: str) -> str:\n    return stringcase.pascalcase(value)\n\n\ndef spinal_case(value: str) -> str:\n    return stringcase.spinalcase(value)\n"}, {"role": "assistant", "content": "import re\n\nimport stringcase\n\n\ndef _sanitize(value: str) -> str:\n    return re.sub(r\"[^\\w _-]+\", \"\", value)\n\n\ndef group_title(value: str) -> str:\n    value = re.sub(r\"([A-Z]{2,})([A-Z][a-z]|[ -_]|$)\", lambda m: m.group(1).title() + m.group(2), value.strip())\n    value = re.sub(r\"(^|[ _-])([A-Z])\", lambda m: m.group(1) + m.group(2).lower(), value)\n    return value\n\n\ndef snake_case(value: str) -> str:\n    return stringcase.snakecase(group_title(_sanitize(value)))\n\n\ndef pascal_case(value: str) -> str:\n    return stringcase.pascalcase(_sanitize(value))\n\n\ndef kebab_case(value: str) -> str:\n    return stringcase.spinalcase(group_title(_sanitize(value)))\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "import pytest\nfrom jinja2 import Environment, PackageLoader\n\n\n@pytest.fixture(scope=\"session\")\ndef env() -> Environment:\n    from openapi_python_client import utils\n\n    TEMPLATE_FILTERS = {\"snakecase\": utils.snake_case, \"spinalcase\": utils.spinal_case}\n    env = Environment(loader=PackageLoader(\"openapi_python_client\"), trim_blocks=True, lstrip_blocks=True)\n    env.filters.update(TEMPLATE_FILTERS)\n    return env\n"}, {"role": "assistant", "content": "import pytest\nfrom jinja2 import Environment, PackageLoader\n\n\n@pytest.fixture(scope=\"session\")\ndef env() -> Environment:\n    from openapi_python_client import utils\n\n    TEMPLATE_FILTERS = {\"snakecase\": utils.snake_case, \"kebabcase\": utils.kebab_case}\n    env = Environment(loader=PackageLoader(\"openapi_python_client\"), trim_blocks=True, lstrip_blocks=True)\n    env.filters.update(TEMPLATE_FILTERS)\n    return env\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "from openapi_python_client import utils\n\n\ndef test_snake_case_uppercase_str():\n    assert utils.snake_case(\"HTTP\") == \"http\"\n    assert utils.snake_case(\"HTTP RESPONSE\") == \"http_response\"\n\n\ndef test_snake_case_from_pascal_with_acronyms():\n    assert utils.snake_case(\"HTTPResponse\") == \"http_response\"\n    assert utils.snake_case(\"APIClientHTTPResponse\") == \"api_client_http_response\"\n    assert utils.snake_case(\"OAuthClientHTTPResponse\") == \"o_auth_client_http_response\"\n\n\ndef test_snake_case_from_pascal():\n    assert utils.snake_case(\"HttpResponsePascalCase\") == \"http_response_pascal_case\"\n\n\ndef test_snake_case_from_camel():\n    assert utils.snake_case(\"httpResponseLowerCamel\") == \"http_response_lower_camel\"\n\n\ndef test_spinal_case():\n    assert utils.spinal_case(\"keep_alive\") == \"keep-alive\"\n"}, {"role": "assistant", "content": "from openapi_python_client import utils\n\n\ndef test_snake_case_uppercase_str():\n    assert utils.snake_case(\"HTTP\") == \"http\"\n    assert utils.snake_case(\"HTTP RESPONSE\") == \"http_response\"\n\n\ndef test_snake_case_from_pascal_with_acronyms():\n    assert utils.snake_case(\"HTTPResponse\") == \"http_response\"\n    assert utils.snake_case(\"APIClientHTTPResponse\") == \"api_client_http_response\"\n    assert utils.snake_case(\"OAuthClientHTTPResponse\") == \"o_auth_client_http_response\"\n\n\ndef test_snake_case_from_pascal():\n    assert utils.snake_case(\"HttpResponsePascalCase\") == \"http_response_pascal_case\"\n\n\ndef test_snake_case_from_camel():\n    assert utils.snake_case(\"httpResponseLowerCamel\") == \"http_response_lower_camel\"\n\n\ndef test_kebab_case():\n    assert utils.kebab_case(\"keep_alive\") == \"keep-alive\"\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{% macro construct(property, source) %}\n{% if property.required %}\n{{ property.python_name }} = date.fromisoformat({{ source }})\n{% else %}\n{{ property.python_name }} = None\nif {{ source }} is not None:\n    {{ property.python_name }} = date.fromisoformat(cast(str, {{ source }}))\n{% endif %}\n{% endmacro %}\n\n{% macro transform(property, source, destination) %}\n{% if property.required %}\n{{ destination }} = {{ source }}.isoformat()\n{% else %}\n{{ destination }} = {{ source }}.isoformat() if {{ source }} else None\n{% endif %}\n{% endmacro %}\n"}, {"role": "assistant", "content": "{% macro construct(property, source) %}\n{% if property.required %}\n{{ property.python_name }} = datetime.date.fromisoformat({{ source }})\n{% else %}\n{{ property.python_name }} = None\nif {{ source }} is not None:\n    {{ property.python_name }} = datetime.date.fromisoformat(cast(str, {{ source }}))\n{% endif %}\n{% endmacro %}\n\n{% macro transform(property, source, destination) %}\n{% if property.required %}\n{{ destination }} = {{ source }}.isoformat()\n{% else %}\n{{ destination }} = {{ source }}.isoformat() if {{ source }} else None\n{% endif %}\n{% endmacro %}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{% macro construct(property, source) %}\n{% if property.required %}\n{{ property.python_name }} = datetime.fromisoformat({{ source }})\n{% else %}\n{{ property.python_name }} = None\nif {{ source }} is not None:\n    {{ property.python_name }} = datetime.fromisoformat(cast(str, {{ source }}))\n{% endif %}\n{% endmacro %}\n\n{% macro transform(property, source, destination) %}\n{% if property.required %}\n{{ destination }} = {{ source }}.isoformat()\n{% else %}\n{{ destination }} = {{ source }}.isoformat() if {{ source }} else None\n{% endif %}\n{% endmacro %}\n"}, {"role": "assistant", "content": "{% macro construct(property, source) %}\n{% if property.required %}\n{{ property.python_name }} = datetime.datetime.fromisoformat({{ source }})\n{% else %}\n{{ property.python_name }} = None\nif {{ source }} is not None:\n    {{ property.python_name }} = datetime.datetime.fromisoformat(cast(str, {{ source }}))\n{% endif %}\n{% endmacro %}\n\n{% macro transform(property, source, destination) %}\n{% if property.required %}\n{{ destination }} = {{ source }}.isoformat()\n{% else %}\n{{ destination }} = {{ source }}.isoformat() if {{ source }} else None\n{% endif %}\n{% endmacro %}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "import re\n\nimport stringcase\n\n\ndef _sanitize(value: str) -> str:\n    return re.sub(r\"[^\\w _-]+\", \"\", value)\n\n\ndef group_title(value: str) -> str:\n    value = re.sub(r\"([A-Z]{2,})([A-Z][a-z]|[ -_]|$)\", lambda m: m.group(1).title() + m.group(2), value.strip())\n    value = re.sub(r\"(^|[ _-])([A-Z])\", lambda m: m.group(1) + m.group(2).lower(), value)\n    return value\n\n\ndef snake_case(value: str) -> str:\n    return stringcase.snakecase(group_title(_sanitize(value)))\n\n\ndef pascal_case(value: str) -> str:\n    return stringcase.pascalcase(_sanitize(value))\n\n\ndef kebab_case(value: str) -> str:\n    return stringcase.spinalcase(group_title(_sanitize(value)))\n"}, {"role": "assistant", "content": "import re\nfrom keyword import iskeyword\n\nimport stringcase\n\n\ndef sanitize(value: str) -> str:\n    return re.sub(r\"[^\\w _\\-]+\", \"\", value)\n\n\ndef fix_keywords(value: str) -> str:\n    if iskeyword(value):\n        return f\"{value}_\"\n    return value\n\n\ndef group_title(value: str) -> str:\n    value = re.sub(r\"([A-Z]{2,})([A-Z][a-z]|[ \\-_]|$)\", lambda m: m.group(1).title() + m.group(2), value.strip())\n    value = re.sub(r\"(^|[ _-])([A-Z])\", lambda m: m.group(1) + m.group(2).lower(), value)\n    return value\n\n\ndef snake_case(value: str) -> str:\n    return fix_keywords(stringcase.snakecase(group_title(sanitize(value))))\n\n\ndef pascal_case(value: str) -> str:\n    return fix_keywords(stringcase.pascalcase(sanitize(value)))\n\n\ndef kebab_case(value: str) -> str:\n    return fix_keywords(stringcase.spinalcase(group_title(sanitize(value))))\n\n\ndef remove_string_escapes(value: str) -> str:\n    return value.replace('\"', r\"\\\"\")\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const _ = require('lodash');\nconst ActiveConnector = require('../../connector/active');\n\nconst FAMILY = {\n  1: 4,\n  2: 6\n};\n\nmodule.exports = {\n  directive: 'EPRT',\n  handler: function ({command} = {}) {\n    const [, protocol, ip, port] = _.chain(command).get('arg', '').split('|').value();\n    const family = FAMILY[protocol];\n    if (!family) return this.reply(504, 'Unknown network protocol');\n\n    this.connector = new ActiveConnector(this);\n    return this.connector.setupConnection(ip, port, family)\n    .then(() => this.reply(200));\n  },\n  syntax: '{{cmd}} |<protocol>|<address>|<port>|',\n  description: 'Specifies an address and port to which the server should connect'\n};\n"}, {"role": "assistant", "content": "const _ = require('lodash');\nconst ActiveConnector = require('../../connector/active');\n\nconst FAMILY = {\n  1: 4,\n  2: 6\n};\n\nmodule.exports = {\n  directive: 'EPRT',\n  handler: function ({log, command} = {}) {\n    const [, protocol, ip, port] = _.chain(command).get('arg', '').split('|').value();\n    const family = FAMILY[protocol];\n    if (!family) return this.reply(504, 'Unknown network protocol');\n\n    this.connector = new ActiveConnector(this);\n    return this.connector.setupConnection(ip, port, family)\n    .then(() => this.reply(200))\n    .catch((err) => {\n      log.error(err);\n      return this.reply(err.code || 425, err.message);\n    });\n  },\n  syntax: '{{cmd}} |<protocol>|<address>|<port>|',\n  description: 'Specifies an address and port to which the server should connect'\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const PassiveConnector = require('../../connector/passive');\n\nmodule.exports = {\n  directive: 'EPSV',\n  handler: function () {\n    this.connector = new PassiveConnector(this);\n    return this.connector.setupServer()\n    .then((server) => {\n      const {port} = server.address();\n\n      return this.reply(229, `EPSV OK (|||${port}|)`);\n    });\n  },\n  syntax: '{{cmd}} [<protocol>]',\n  description: 'Initiate passive mode'\n};\n"}, {"role": "assistant", "content": "const PassiveConnector = require('../../connector/passive');\n\nmodule.exports = {\n  directive: 'EPSV',\n  handler: function ({log}) {\n    this.connector = new PassiveConnector(this);\n    return this.connector.setupServer()\n    .then((server) => {\n      const {port} = server.address();\n\n      return this.reply(229, `EPSV OK (|||${port}|)`);\n    })\n    .catch((err) => {\n      log.error(err);\n      return this.reply(err.code || 425, err.message);\n    });\n  },\n  syntax: '{{cmd}} [<protocol>]',\n  description: 'Initiate passive mode'\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const PassiveConnector = require('../../connector/passive');\nconst {isLocalIP} = require('../../helpers/is-local');\n\nmodule.exports = {\n  directive: 'PASV',\n  handler: function ({log} = {}) {\n    if (!this.server.options.pasv_url) {\n      return this.reply(502);\n    }\n\n    this.connector = new PassiveConnector(this);\n    return this.connector.setupServer()\n    .then((server) => {\n      let address = this.server.options.pasv_url;\n      // Allow connecting from local\n      if (isLocalIP(this.ip)) {\n        address = this.ip;\n      }\n      const {port} = server.address();\n      const host = address.replace(/\\./g, ',');\n      const portByte1 = port / 256 | 0;\n      const portByte2 = port % 256;\n\n      return this.reply(227, `PASV OK (${host},${portByte1},${portByte2})`);\n    })\n    .catch((err) => {\n      log.error(err);\n      return this.reply(425);\n    });\n  },\n  syntax: '{{cmd}}',\n  description: 'Initiate passive mode'\n};\n"}, {"role": "assistant", "content": "const PassiveConnector = require('../../connector/passive');\nconst {isLocalIP} = require('../../helpers/is-local');\n\nmodule.exports = {\n  directive: 'PASV',\n  handler: function ({log} = {}) {\n    if (!this.server.options.pasv_url) {\n      return this.reply(502);\n    }\n\n    this.connector = new PassiveConnector(this);\n    return this.connector.setupServer()\n    .then((server) => {\n      let address = this.server.options.pasv_url;\n      // Allow connecting from local\n      if (isLocalIP(this.ip)) {\n        address = this.ip;\n      }\n      const {port} = server.address();\n      const host = address.replace(/\\./g, ',');\n      const portByte1 = port / 256 | 0;\n      const portByte2 = port % 256;\n\n      return this.reply(227, `PASV OK (${host},${portByte1},${portByte2})`);\n    })\n    .catch((err) => {\n      log.error(err);\n      return this.reply(err.code || 425, err.message);\n    });\n  },\n  syntax: '{{cmd}}',\n  description: 'Initiate passive mode'\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const _ = require('lodash');\nconst ActiveConnector = require('../../connector/active');\n\nmodule.exports = {\n  directive: 'PORT',\n  handler: function ({log, command} = {}) {\n    this.connector = new ActiveConnector(this);\n\n    const rawConnection = _.get(command, 'arg', '').split(',');\n    if (rawConnection.length !== 6) return this.reply(425);\n\n    const ip = rawConnection.slice(0, 4).join('.');\n    const portBytes = rawConnection.slice(4).map((p) => parseInt(p));\n    const port = portBytes[0] * 256 + portBytes[1];\n\n    return this.connector.setupConnection(ip, port)\n    .then(() => this.reply(200))\n    .catch((err) => {\n      log.error(err);\n      return this.reply(425);\n    });\n  },\n  syntax: '{{cmd}} <x>,<x>,<x>,<x>,<y>,<y>',\n  description: 'Specifies an address and port to which the server should connect'\n};\n"}, {"role": "assistant", "content": "const _ = require('lodash');\nconst ActiveConnector = require('../../connector/active');\n\nmodule.exports = {\n  directive: 'PORT',\n  handler: function ({log, command} = {}) {\n    this.connector = new ActiveConnector(this);\n\n    const rawConnection = _.get(command, 'arg', '').split(',');\n    if (rawConnection.length !== 6) return this.reply(425);\n\n    const ip = rawConnection.slice(0, 4).join('.');\n    const portBytes = rawConnection.slice(4).map((p) => parseInt(p));\n    const port = portBytes[0] * 256 + portBytes[1];\n\n    return this.connector.setupConnection(ip, port)\n    .then(() => this.reply(200))\n    .catch((err) => {\n      log.error(err);\n      return this.reply(err.code || 425, err.message);\n    });\n  },\n  syntax: '{{cmd}} <x>,<x>,<x>,<x>,<y>,<y>',\n  description: 'Specifies an address and port to which the server should connect'\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const Promise = require('bluebird');\nconst errors = require('../errors');\n\nclass Connector {\n  constructor(connection) {\n    this.connection = connection;\n\n    this.dataSocket = null;\n    this.dataServer = null;\n    this.type = false;\n  }\n\n  get log() {\n    return this.connection.log;\n  }\n\n  get socket() {\n    return this.dataSocket;\n  }\n\n  get server() {\n    return this.connection.server;\n  }\n\n  waitForConnection() {\n    return Promise.reject(new errors.ConnectorError('No connector setup, send PASV or PORT'));\n  }\n\n  closeSocket() {\n    if (this.dataSocket) {\n      const socket = this.dataSocket;\n      this.dataSocket.end(() => socket.destroy());\n      this.dataSocket = null;\n    }\n  }\n\n  closeServer() {\n    if (this.dataServer) {\n      this.dataServer.close();\n      this.dataServer = null;\n    }\n  }\n\n\n  end() {\n    this.closeSocket();\n    this.closeServer();\n\n    this.type = false;\n    this.connection.connector = new Connector(this);\n  }\n}\nmodule.exports = Connector;\n"}, {"role": "assistant", "content": "const Promise = require('bluebird');\nconst errors = require('../errors');\n\nclass Connector {\n  constructor(connection) {\n    this.connection = connection;\n\n    this.dataSocket = null;\n    this.dataServer = null;\n    this.type = false;\n  }\n\n  get log() {\n    return this.connection.log;\n  }\n\n  get socket() {\n    return this.dataSocket;\n  }\n\n  get server() {\n    return this.connection.server;\n  }\n\n  waitForConnection() {\n    return Promise.reject(new errors.ConnectorError('No connector setup, send PASV or PORT'));\n  }\n\n  closeSocket() {\n    if (this.dataSocket) {\n      const socket = this.dataSocket;\n      this.dataSocket.end(() => socket && socket.destroy());\n      this.dataSocket = null;\n    }\n  }\n\n  closeServer() {\n    if (this.dataServer) {\n      this.dataServer.close();\n      this.dataServer = null;\n    }\n  }\n\n\n  end() {\n    this.closeSocket();\n    this.closeServer();\n\n    this.type = false;\n    this.connection.connector = new Connector(this);\n  }\n}\nmodule.exports = Connector;\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const Promise = require('bluebird');\nconst {expect} = require('chai');\nconst sinon = require('sinon');\n\nconst PassiveConnector = require('../../../src/connector/passive');\n\nconst CMD = 'EPSV';\ndescribe(CMD, function () {\n  let sandbox;\n  const mockClient = {\n    reply: () => Promise.resolve()\n  };\n  const cmdFn = require(`../../../src/commands/registration/${CMD.toLowerCase()}`).handler.bind(mockClient);\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create().usingPromise(Promise);\n\n    sandbox.stub(mockClient, 'reply').resolves();\n    sandbox.stub(PassiveConnector.prototype, 'setupServer').resolves({\n      address: () => ({port: 12345})\n    });\n  });\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  it('// successful IPv4', () => {\n    return cmdFn()\n    .then(() => {\n      const [code, message] = mockClient.reply.args[0];\n      expect(code).to.equal(229);\n      expect(message).to.equal('EPSV OK (|||12345|)');\n    });\n  });\n});\n"}, {"role": "assistant", "content": "const Promise = require('bluebird');\nconst {expect} = require('chai');\nconst sinon = require('sinon');\n\nconst PassiveConnector = require('../../../src/connector/passive');\n\nconst CMD = 'EPSV';\ndescribe(CMD, function () {\n  let sandbox;\n  const mockClient = {\n    reply: () => Promise.resolve()\n  };\n  const cmdFn = require(`../../../src/commands/registration/${CMD.toLowerCase()}`).handler.bind(mockClient);\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create().usingPromise(Promise);\n\n    sandbox.stub(mockClient, 'reply').resolves();\n    sandbox.stub(PassiveConnector.prototype, 'setupServer').resolves({\n      address: () => ({port: 12345})\n    });\n  });\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  it('// successful IPv4', () => {\n    return cmdFn({})\n    .then(() => {\n      const [code, message] = mockClient.reply.args[0];\n      expect(code).to.equal(229);\n      expect(message).to.equal('EPSV OK (|||12345|)');\n    });\n  });\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const bunyan = require('bunyan');\nconst fs = require('fs');\nconst FtpServer = require('../src');\n\nconst server = new FtpServer({\n  log: bunyan.createLogger({name: 'test', level: 'trace'}),\n  url: 'ftp://127.0.0.1:8880',\n  pasv_url: '192.168.1.1',\n  pasv_min: 8881,\n  greeting: ['Welcome', 'to', 'the', 'jungle!'],\n  tls: {\n    key: fs.readFileSync(`${process.cwd()}/test/cert/server.key`),\n    cert: fs.readFileSync(`${process.cwd()}/test/cert/server.crt`),\n    ca: fs.readFileSync(`${process.cwd()}/test/cert/server.csr`)\n  },\n  file_format: 'ep',\n  anonymous: 'sillyrabbit'\n});\nserver.on('login', ({username, password}, resolve, reject) => {\n  if (username === 'test' && password === 'test' || username === 'anonymous') {\n    resolve({root: require('os').homedir()});\n  } else reject('Bad username or password');\n});\nserver.listen();\n"}, {"role": "assistant", "content": "const bunyan = require('bunyan');\nconst fs = require('fs');\nconst FtpServer = require('../src');\n\nconst server = new FtpServer({\n  log: bunyan.createLogger({name: 'test', level: 'trace'}),\n  url: 'ftp://127.0.0.1:8880',\n  pasv_url: '192.168.1.1',\n  pasv_min: 8881,\n  greeting: ['Welcome', 'to', 'the', 'jungle!'],\n  tls: {\n    key: fs.readFileSync(`${__dirname}/cert/server.key`),\n    cert: fs.readFileSync(`${__dirname}/cert/server.crt`),\n    ca: fs.readFileSync(`${__dirname}/cert/server.csr`)\n  },\n  file_format: 'ep',\n  anonymous: 'sillyrabbit'\n});\nserver.on('login', ({username, password}, resolve, reject) => {\n  if (username === 'test' && password === 'test' || username === 'anonymous') {\n    resolve({root: __dirname});\n  } else reject('Bad username or password');\n});\nserver.listen();\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "<?php\n/**\n * baserCMS :  Based Website Development Project <https://basercms.net>\n * Copyright (c) baserCMS Users Community <https://basercms.net/community/>\n *\n * @copyright       Copyright (c) baserCMS Users Community\n * @link            https://basercms.net baserCMS Project\n * @package            Uploader.View\n * @since           baserCMS v 3.0.10\n * @license         https://basercms.net/license/index.html\n */\n$url = $this->BcBaser->getUrl($this->Uploader->getFileUrl($file['UploaderFile']['name']));\n?>\n\n\n<p class=\"url\">\n\t<a href=\"<?php echo $url ?>\" target=\"_blank\"><?php echo FULL_BASE_URL . $url ?></a>\n</p>\n<p class=\"image\">\n\t<a href=\"<?php echo $url ?>\"\n\t   target=\"_blank\"><?php echo $this->Uploader->file($file, ['size' => $size, 'alt' => $file['UploaderFile']['name']]) ?></a>\n</p>\n"}, {"role": "assistant", "content": "<?php\n/**\n * baserCMS :  Based Website Development Project <https://basercms.net>\n * Copyright (c) baserCMS Users Community <https://basercms.net/community/>\n *\n * @copyright       Copyright (c) baserCMS Users Community\n * @link            https://basercms.net baserCMS Project\n * @package         Uploader.View\n * @since           baserCMS v 3.0.10\n * @license         https://basercms.net/license/index.html\n */\n\n/**\n * @var BcAppView $this\n * @var array $file\n * @var string $size\n */\n$url = h($this->BcBaser->getUrl($this->Uploader->getFileUrl($file['UploaderFile']['name'])));\n?>\n\n\n<p class=\"url\">\n\t<a href=\"<?php echo $url ?>\" target=\"_blank\"><?php echo Router::url($url, true) ?></a>\n</p>\n<p class=\"image\">\n\t<a href=\"<?php echo $url ?>\"\n\t   target=\"_blank\"><?php echo $this->Uploader->file($file, ['size' => $size, 'alt' => $file['UploaderFile']['name']]) ?></a>\n</p>\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "<?php\n/**\n * baserCMS :  Based Website Development Project <https://basercms.net>\n * Copyright (c) baserCMS Users Community <https://basercms.net/community/>\n *\n * @copyright       Copyright (c) baserCMS Users Community\n * @link            https://basercms.net baserCMS Project\n * @package         Uploader.View\n * @since           baserCMS v 3.0.10\n * @license         https://basercms.net/license/index.html\n */\n$url = $this->BcBaser->getUrl($this->Uploader->getFileUrl($file['UploaderFile']['name']));\n?>\n\n\n<p class=\"url\">\n\t<a href=\"<?php echo $url ?>\" target=\"_blank\"><?php echo FULL_BASE_URL . $url ?></a>\n</p>\n<p class=\"image\">\n\t<a href=\"<?php echo $url ?>\"\n\t   target=\"_blank\"><?php echo $this->Uploader->file($file, ['size' => $size, 'alt' => $file['UploaderFile']['name']]) ?></a>\n</p>\n"}, {"role": "assistant", "content": "<?php\n/**\n * baserCMS :  Based Website Development Project <https://basercms.net>\n * Copyright (c) baserCMS Users Community <https://basercms.net/community/>\n *\n * @copyright       Copyright (c) baserCMS Users Community\n * @link            https://basercms.net baserCMS Project\n * @package         Uploader.View\n * @since           baserCMS v 3.0.10\n * @license         https://basercms.net/license/index.html\n */\n\n/**\n * @var BcAppView $this\n * @var array $file\n * @var string $size\n */\n$url = h($this->BcBaser->getUrl($this->Uploader->getFileUrl($file['UploaderFile']['name'])));\n?>\n\n\n<p class=\"url\">\n\t<a href=\"<?php echo $url ?>\" target=\"_blank\"><?php echo Router::url($url, true) ?></a>\n</p>\n<p class=\"image\">\n\t<a href=\"<?php echo $url ?>\"\n\t   target=\"_blank\"><?php echo $this->Uploader->file($file, ['size' => $size, 'alt' => $file['UploaderFile']['name']]) ?></a>\n</p>\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "#ifndef __L2TP_PROT_H\n#define __L2TP_PROT_H\n\n#include <stdint.h>\n\n#define L2TP_PORT 1701\n\nstruct l2tp_hdr_t\n{\n\tuint8_t P:1;\n\tuint8_t O:1;\n\tuint8_t reserved2:1;\n\tuint8_t S:1;\n\tuint8_t reserved1:2;\n\tuint8_t L:1;\n\tuint8_t T:1;\n\tuint8_t ver:4;\n\tuint8_t reserved3:4;\n\tuint16_t length;\n\tunion {\n\t\tstruct {\n\t\t\tuint16_t tid;\n\t\t\tuint16_t sid;\n\t\t};\n\t\tuint32_t cid;\n\t};\n\tuint16_t Ns;\n\tuint16_t Nr;\n} __attribute__((packed));\n\n/*#define L2TP_T(hdr) (hdr->flags >> 15)\n#define L2TP_L(hdr) ((hdr->flags >> 14) & 1)\n#define L2TP_S(hdr) ((hdr->flags >> 10) & 1)\n#define L2TP_O(hdr) ((hdr->flags >> 8) & 1)\n#define L2TP_VER(hdr) (hdr->flags & 0xf)*/\n\nstruct l2tp_avp_t\n{\n\tuint16_t length:10;\n\tuint16_t reserved:4;\n\tuint16_t H:1;\n\tuint16_t M:1;\n\tuint16_t vendor;\n\tuint16_t type;\n\tuint8_t val[0];\n} __attribute__((packed));\n\nstruct l2tp_avp_result_code\n{\n\tuint16_t result_code;\n\tuint16_t error_code;\n\tchar error_msg[0];\n} __attribute__((packed));\n\n#endif\n\n"}, {"role": "assistant", "content": "#ifndef __L2TP_PROT_H\n#define __L2TP_PROT_H\n\n#include <stdint.h>\n\n#define L2TP_PORT 1701\n\n#define L2TP_FLAG_T   0x8000\n#define L2TP_FLAG_L   0x4000\n#define L2TP_FLAG_S   0x0800\n#define L2TP_FLAG_O   0x0200\n#define L2TP_FLAG_P   0x0100\n#define L2TP_VER_MASK 0x000f\n\nstruct l2tp_hdr_t\n{\n\tuint16_t flags;\n\tuint16_t length;\n\tunion {\n\t\tstruct {\n\t\t\tuint16_t tid;\n\t\t\tuint16_t sid;\n\t\t};\n\t\tuint32_t cid;\n\t};\n\tuint16_t Ns;\n\tuint16_t Nr;\n} __attribute__((packed));\n\n#define L2TP_AVP_FLAG_M   0x8000\n#define L2TP_AVP_FLAG_H   0x4000\n#define L2TP_AVP_LEN_MASK 0x03ff\n\nstruct l2tp_avp_t\n{\n\tuint16_t flags;\n\tuint16_t vendor;\n\tuint16_t type;\n\tuint8_t val[0];\n} __attribute__((packed));\n\nstruct l2tp_avp_result_code\n{\n\tuint16_t result_code;\n\tuint16_t error_code;\n\tchar error_msg[0];\n} __attribute__((packed));\n\n#endif\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "linters:\n  enable:\n    - gosec\n  disable:\n    - ineffassign\n    - deadcode\n    - unused\n    - structcheck\n    - errcheck\n    - gosimple\n    - bodyclose\n    - staticcheck\n\nrun:\n  skip-files:\n    - \".+_test.go\"\n    - \".+_test_.+.go\"\n"}, {"role": "assistant", "content": "linters:\n  enable:\n    - gosec\n  disable:\n    - ineffassign\n    - deadcode\n    - unused\n    - structcheck\n    - gosimple\n    - bodyclose\n    - staticcheck\n\nrun:\n  skip-files:\n    - \".+_test.go\"\n    - \".+_test_.+.go\"\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "// +build tools\n\npackage fosite\n\nimport (\n\t_ \"github.com/gorilla/websocket\"\n\t_ \"github.com/mattn/goveralls\"\n\t_ \"github.com/ory/go-acc\"\n)\n"}, {"role": "assistant", "content": "// +build tools\n\npackage fosite\n\nimport (\n\t_ \"github.com/gorilla/websocket\"\n\t_ \"github.com/mattn/goveralls\"\n\n\t_ \"github.com/ory/go-acc\"\n)\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "// Copyright (c) Open Enclave SDK contributors.\n// Licensed under the MIT License.\n\n#ifndef _OE_SYSCALL_IOV_H\n#define _OE_SYSCALL_IOV_H\n\n#include <openenclave/bits/fs.h>\n#include <openenclave/bits/result.h>\n#include <openenclave/internal/syscall/fd.h>\n#include <openenclave/internal/syscall/sys/stat.h>\n\nOE_EXTERNC_BEGIN\n\nint oe_iov_pack(\n    const struct oe_iovec* iov,\n    int iovcnt,\n    void** buf_out,\n    size_t* buf_size_out);\n\nint oe_iov_sync(\n    const struct oe_iovec* iov,\n    int iovcnt,\n    const void* buf_,\n    size_t buf_size);\n\nOE_EXTERNC_END\n\n#endif // _OE_SYSCALL_IOV_H\n"}, {"role": "assistant", "content": "// Copyright (c) Open Enclave SDK contributors.\n// Licensed under the MIT License.\n\n#ifndef _OE_SYSCALL_IOV_H\n#define _OE_SYSCALL_IOV_H\n\n#include <openenclave/bits/fs.h>\n#include <openenclave/bits/result.h>\n#include <openenclave/internal/syscall/fd.h>\n#include <openenclave/internal/syscall/sys/stat.h>\n\nOE_EXTERNC_BEGIN\n\nint oe_iov_pack(\n    const struct oe_iovec* iov,\n    int iovcnt,\n    void** buf_out,\n    size_t* buf_size_out,\n    size_t* data_size_out);\n\nint oe_iov_sync(\n    const struct oe_iovec* iov,\n    int iovcnt,\n    const void* buf_,\n    size_t buf_size);\n\nOE_EXTERNC_END\n\n#endif // _OE_SYSCALL_IOV_H\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# flake8: noqa\nimport pkgutil\n\nfrom .filters import *\nfrom .filterset import FilterSet\n\n# We make the `rest_framework` module available without an additional import.\n#   If DRF is not installed, no-op.\nif pkgutil.find_loader('rest_framework') is not None:\n    from . import rest_framework\ndel pkgutil\n\n__version__ = '2.3.0'\n\n\ndef parse_version(version):\n    '''\n    '0.1.2.dev1' -> (0, 1, 2, 'dev1')\n    '0.1.2' -> (0, 1, 2)\n    '''\n    v = version.split('.')\n    ret = []\n    for p in v:\n        if p.isdigit():\n            ret.append(int(p))\n        else:\n            ret.append(p)\n    return tuple(ret)\n\nVERSION = parse_version(__version__)\n"}, {"role": "assistant", "content": "# flake8: noqa\nimport pkgutil\n\nfrom .filters import *\nfrom .filterset import FilterSet\n\n# We make the `rest_framework` module available without an additional import.\n#   If DRF is not installed, no-op.\nif pkgutil.find_loader('rest_framework') is not None:\n    from . import rest_framework\ndel pkgutil\n\n__version__ = '2.4.0'\n\n\ndef parse_version(version):\n    '''\n    '0.1.2.dev1' -> (0, 1, 2, 'dev1')\n    '0.1.2' -> (0, 1, 2)\n    '''\n    v = version.split('.')\n    ret = []\n    for p in v:\n        if p.isdigit():\n            ret.append(int(p))\n        else:\n            ret.append(p)\n    return tuple(ret)\n\nVERSION = parse_version(__version__)\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "alabaster==0.7.7\nargh==0.26.1\nBabel==2.2.0\nbackports.ssl-match-hostname==3.4.0.2\nbumpversion==0.5.3\ncertifi==2015.9.6.2\ndocutils==0.12\nfuncsigs==0.4\nJinja2>=2.10.1\nlivereload==2.4.0\nMarkupSafe==0.23\npathtools==0.1.2\npbr==1.7.0\npkginfo==1.2.1\nPygments==2.1.3\npytz==2016.6.1\nPyYAML==5.1\nrequests==2.20.0\nsix==1.9.0\nsnowballstemmer==1.2.1\nSphinx==1.3.6\nsphinx-autobuild==0.6.0\nsphinx-rtd-theme==0.1.9\ntornado==4.2.1\ntwine\nwatchdog==0.8.3\n"}, {"role": "assistant", "content": "alabaster==0.7.7\nargh==0.26.1\nBabel==2.2.0\nbackports.ssl-match-hostname==3.4.0.2\ncertifi==2015.9.6.2\ndocutils==0.12\nfuncsigs==0.4\nJinja2>=2.10.1\nlivereload==2.4.0\nMarkupSafe==0.23\npathtools==0.1.2\npbr==1.7.0\npkginfo==1.2.1\nPygments==2.1.3\npytz==2016.6.1\nPyYAML==5.1\nrequests==2.20.0\nsix==1.9.0\nsnowballstemmer==1.2.1\nSphinx==1.3.6\nsphinx-autobuild==0.6.0\nsphinx-rtd-theme==0.1.9\ntornado==4.2.1\ntwine\nwatchdog==0.8.3\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "/// Errors thrown while encoding/decoding `application/x-www-form-urlencoded` data.\nenum URLEncodedFormError: Error {\n    case malformedKey(key: Substring)\n}\n\nextension URLEncodedFormError: AbortError {\n    var status: HTTPResponseStatus {\n        .badRequest\n    }\n\n    var reason: String {\n        switch self {\n        case .malformedKey(let path):\n            return \"Malformed form-urlencoded key encountered: \\(path)\"\n        }\n    }\n}\n"}, {"role": "assistant", "content": "/// Errors thrown while encoding/decoding `application/x-www-form-urlencoded` data.\nenum URLEncodedFormError: Error {\n    case malformedKey(key: Substring)\n    case reachedNestingLimit\n}\n\nextension URLEncodedFormError: AbortError {\n    var status: HTTPResponseStatus {\n        .badRequest\n    }\n\n    var reason: String {\n        switch self {\n        case .malformedKey(let path):\n            return \"Malformed form-urlencoded key encountered: \\(path)\"\n        case .reachedNestingLimit:\n            return \"The data supplied is too nested\"\n        }\n    }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "<!DOCTYPE html>\n<!-- Wire, Copyright (C) 2018 Wire Swiss GmbH -->\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"../css/about.css\" />\n  </head>\n  <body>\n    <div>\n      <img id=\"logo\" />\n      <h1 id=\"name\"></h1>\n      <p class=\"copy\"><span data-string=\"aboutVersion\"></span> <span id=\"version\"></span></p>\n      <p class=\"webappVersion copy\"><span data-string=\"aboutWebappVersion\"></span> <span id=\"webappVersion\"></span></p>\n      <p>\n        <a href=\"https://support.wire.com/hc/articles/115001919905\"><span data-string=\"aboutUpdate\"></span></a>\n      </p>\n      <p>\n        <a href=\"https://medium.com/wire-news/webapp-updates/home\"><span data-string=\"aboutReleases\"></span></a>\n      </p>\n      <p><span id=\"copyright\"></span></p>\n    </div>\n  </body>\n</html>\n"}, {"role": "assistant", "content": "<!DOCTYPE html>\n<!-- Wire, Copyright (C) 2018 Wire Swiss GmbH -->\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"../css/about.css\" />\n  </head>\n  <body>\n    <div>\n      <img id=\"logo\" />\n      <h1 id=\"name\"></h1>\n      <p class=\"copy\"><span data-string=\"aboutVersion\"></span> <span id=\"version\"></span></p>\n      <p class=\"webappVersion copy\"><span data-string=\"aboutWebappVersion\"></span> <span id=\"webappVersion\"></span></p>\n      <p>\n        <a href=\"https://support.wire.com/hc/articles/115001919905\" target=\"_blank\">\n          <span data-string=\"aboutUpdate\"></span>\n        </a>\n      </p>\n      <p>\n        <a href=\"https://medium.com/wire-news/webapp-updates/home\" target=\"_blank\">\n          <span data-string=\"aboutReleases\"></span>\n        </a>\n      </p>\n      <p><span id=\"copyright\"></span></p>\n    </div>\n  </body>\n</html>\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "shared_context 'API v2 tokens' do\n  let(:token) { Doorkeeper::AccessToken.create!(resource_owner_id: user.id, expires_in: nil) }\n  let(:headers_bearer) { { 'Authorization' => \"Bearer #{token.token}\" } }\n  let(:headers_order_token) { { 'X-Spree-Order-Token' => order.token } }\nend\n\n[200, 201, 400, 404, 403, 422].each do |status_code|\n  shared_examples \"returns #{status_code} HTTP status\" do\n    it \"returns #{status_code}\" do\n      expect(response.status).to eq(status_code)\n    end\n  end\nend\n"}, {"role": "assistant", "content": "shared_context 'API v2 tokens' do\n  let(:token) { Doorkeeper::AccessToken.create!(resource_owner_id: user.id, expires_in: nil) }\n  let(:headers_bearer) { { 'Authorization' => \"Bearer #{token.token}\" } }\n  let(:headers_order_token) { { 'X-Spree-Order-Token' => order.token } }\nend\n\n[200, 201, 400, 401, 404, 403, 422].each do |status_code|\n  shared_examples \"returns #{status_code} HTTP status\" do\n    it \"returns #{status_code}\" do\n      expect(response.status).to eq(status_code)\n    end\n  end\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to [Semantic\nVersioning].\n\n## [Unreleased]\n\n- _No changes yet_\n\n## [1.0.0] - 2020-10-22\n\n- Run the Action to get the git tag annotation of the current tag.\n- Run the Action to get the git tag annotation of a specified tag.\n\n[keep a changelog]: https://keepachangelog.com/en/1.0.0/\n[semantic versioning]: https://semver.org/spec/v2.0.0.html\n"}, {"role": "assistant", "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to [Semantic\nVersioning].\n\n## [Unreleased]\n\n- _No changes yet_\n\n## [1.0.1] - 2020-10-24\n\n- Update Action icon.\n- Fix shell injection vulnerability.\n\n## [1.0.0] - 2020-10-22\n\n- Run the Action to get the git tag annotation of the current tag.\n- Run the Action to get the git tag annotation of a specified tag.\n\n[keep a changelog]: https://keepachangelog.com/en/1.0.0/\n[semantic versioning]: https://semver.org/spec/v2.0.0.html\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "name: 'Git Tag Annotation'\ndescription: 'Get the annotation associated with a git tag'\nauthor: 'Eric Cornelissen'\n\ninputs:\n  tag:\n    description: 'tag of interest (defaults to the GITHUB_REF environment variable)'\n    required: false\n\noutputs:\n  git-tag-annotation:\n    description: 'The git tag annotation'\n\nruns:\n  using: 'node12'\n  main: 'lib/index.js'\n\nbranding:\n  icon: 'git-commit'\n  color: 'gray-dark'\n"}, {"role": "assistant", "content": "name: 'Git Tag Annotation'\ndescription: 'Get the annotation associated with a git tag'\nauthor: 'Eric Cornelissen'\n\ninputs:\n  tag:\n    description: 'tag of interest (defaults to the GITHUB_REF environment variable)'\n    required: false\n\noutputs:\n  git-tag-annotation:\n    description: 'The git tag annotation'\n\nruns:\n  using: 'node12'\n  main: 'lib/index.js'\n\nbranding:\n  icon: 'tag'\n  color: 'gray-dark'\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const core = require('@actions/core');\nconst { exec } = require('child_process');\n\nfunction main() {\n  try {\n    let tag = process.env.GITHUB_REF;\n    if (core.getInput('tag')) {\n      tag = `refs/tags/${core.getInput('tag')}`;\n    }\n\n    exec(`git for-each-ref --format='%(contents)' ${tag}`, (err, stdout) => {\n      if (err) {\n        core.setFailed(err);\n      } else {\n        core.setOutput('git-tag-annotation', stdout);\n      }\n    });\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nmodule.exports = main;\n"}, {"role": "assistant", "content": "const core = require('@actions/core');\nconst { exec } = require('child_process');\n\n// Based on https://stackoverflow.com/a/22827128\nfunction escapeShellArg(arg) {\n  return arg.replace(/'/g, `'\\\\''`);\n}\n\nfunction main() {\n  try {\n    let tag = process.env.GITHUB_REF;\n    if (core.getInput('tag')) {\n      tag = `refs/tags/${core.getInput('tag')}`;\n    }\n\n    exec(\n      `git for-each-ref --format='%(contents)' '${escapeShellArg(tag)}'`,\n      (err, stdout) => {\n        if (err) {\n          core.setFailed(err);\n        } else {\n          core.setOutput('git-tag-annotation', stdout);\n        }\n      },\n    );\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nmodule.exports = main;\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{\n  \"name\": \"jpv\",\n  \"version\": \"2.2.1\",\n  \"description\": \"Json Pattern Validator\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"tap test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/manvel-khnkoyan/jpv.git\"\n  },\n  \"keywords\": [\n    \"json\",\n    \"pattern\",\n    \"validator\",\n    \"schema\",\n    \"node\",\n    \"validate\",\n    \"javascript\",\n    \"regex\",\n    \"validate\"\n  ],\n  \"author\": \"Manvel Khnkoyan\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/manvel-khnkoyan/jpv/issues\"\n  },\n  \"homepage\": \"https://github.com/manvel-khnkoyan/jpv#readme\"\n}\n"}, {"role": "assistant", "content": "{\n  \"name\": \"jpv\",\n  \"version\": \"2.2.1\",\n  \"description\": \"Json Pattern Validator - JSON schema validator library\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"tap test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/manvel-khnkoyan/jpv.git\"\n  },\n  \"keywords\": [\n    \"json\",\n    \"pattern\",\n    \"validator\",\n    \"schema\",\n    \"regex\",\n    \"validate\"\n  ],\n  \"author\": \"Manvel Khnkoyan\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/manvel-khnkoyan/jpv/issues\"\n  },\n  \"homepage\": \"https://github.com/manvel-khnkoyan/jpv#readme\",\n  \"devDependencies\": {\n    \"tap\": \"^14.10.8\"\n  }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\nconst tap = require('tap');\nconst { validate, is, typeOf } = require('../index.js');\n\nconst json = {\n    key1: 'OK',\n    key2: 'Yes',\n    key3: 15,\n};\n\nconst validPattern1 = {\n    key1: '{/OK/}',\n    key2: '!(number)',\n    key3: '(number)?'\n};\n\nconst validPattern2 = {\n    key1: '!{yes}',\n    key2: '(string)?',\n    key3: '[number]?'\n};\n\nconst invalidPattern1 = {\n    key1: '{/OK/}',\n    key2: '(string)?',\n    key3: '(string)?',\n};\n\nconst invalidPattern2 = {\n    key1: '{/OK/}',\n    key2: '!(string)',\n    key3: 15\n}\n\n// Valid Case\ntap.test('Deprecated', function (t) {\n    t.ok(validate(json, validPattern1, { debug: true }), 'Valid Case 1');\n    t.ok(validate(json, validPattern2, { debug: true }), 'Valid Case 2');\n    t.ok(!validate(json, invalidPattern1, { debug: true }), 'Invalid Case 1');\n    t.ok(!validate(json, invalidPattern2, { debug: true }), 'Invalid Case 2');\n    t.end();\n});\n"}, {"role": "assistant", "content": "\nconst tap = require('tap');\nconst { validate } = require('../index.js');\n\nconst json = {\n    key1: 'OK',\n    key2: 'Yes',\n    key3: 15\n};\n\nconst validPattern1 = {\n    key1: '{/OK/}',\n    key2: '!(number)',\n    key3: '(number)?'\n};\n\nconst validPattern2 = {\n    key1: '!{yes}',\n    key2: '(string)?',\n    key3: '[number]?'\n};\n\nconst invalidPattern1 = {\n    key1: '{/OK/}',\n    key2: '(string)?',\n    key3: '(string)?',\n};\n\nconst invalidPattern2 = {\n    key1: '{/OK/}',\n    key2: '!(string)',\n    key3: 15\n};\n\n// Valid Case\ntap.test('Deprecated', function (t) {\n    t.ok(validate(json, validPattern1, { debug: true }), 'Valid Case 1');\n    t.ok(validate(json, validPattern2, { debug: true }), 'Valid Case 2');\n    t.ok(!validate(json, invalidPattern1, { debug: true }), 'Invalid Case 1');\n    t.ok(!validate(json, invalidPattern2, { debug: true }), 'Invalid Case 2');\n    t.end();\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\nconst tap = require('tap');\nconst { validate, is, typeOf, exact } = require('../index.js');\n\nconst json = {\n    key1: 'OK',\n    key2: 'Yes',\n    key3: () => {\n    },\n};\n\nconst validPattern1 = {\n    key1: /OK/,\n    key2: (val) => val === 'Yes',\n    key3: '(function)'\n};\n\nconst validPattern2 = {\n    key1: exact('OK'),\n    key2: (val) => val === 'Yes',\n    key3: typeOf('function')\n};\n\nconst invalidPattern1 = {\n    key1: /OK/,\n    key2: (val) => val === 'no',\n    key3: '(function)'\n};\n\n\n// Valid Case\ntap.test('Functional', function (t) {\n    t.ok(validate(json, validPattern1, { debug: true }), 'Valid Case 1');\n    t.ok(validate(json, validPattern2, { debug: true }), 'Valid Case 2');\n    t.ok(!validate(json, invalidPattern1, { debug: true }), 'Invalid Case 1');\n    t.end();\n});\n"}, {"role": "assistant", "content": "\nconst tap = require('tap');\nconst { validate, typeOf, exact } = require('../index.js');\n\nconst json = {\n    key1: 'OK',\n    key2: 'Yes',\n    key3: () => {\n    }\n};\n\nconst validPattern1 = {\n    key1: /OK/,\n    key2: (val) => val === 'Yes',\n    key3: '(function)'\n};\n\nconst validPattern2 = {\n    key1: exact('OK'),\n    key2: (val) => val === 'Yes',\n    key3: typeOf('function')\n};\n\nconst invalidPattern1 = {\n    key1: /OK/,\n    key2: (val) => val === 'no',\n    key3: '(function)'\n};\n\n// Valid Case\ntap.test('Functional', function (t) {\n    t.ok(validate(json, validPattern1, { debug: true }), 'Valid Case 1');\n    t.ok(validate(json, validPattern2, { debug: true }), 'Valid Case 2');\n    t.ok(!validate(json, invalidPattern1, { debug: true }), 'Invalid Case 1');\n    t.end();\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\nconst tap = require('tap');\nconst jpv = require('../index.js');\n\nconst json = {\n    key1: 'OK',\n    key2: {\n        url: 'http://example.com'\n    },\n    key3: '17850',\n    key4: '2012-10-06T04:13:00+00:00'\n};\n\nconst pattern = {\n    key2: {\n        url: '[url]'\n    },\n    key3: new RegExp('[0-9]+', 'i'),\n    key4: '[datetime]',\n};\n\nconst pattern2 = {\n    key1: 'OK',\n    key2: {\n        url: '[url]'\n    },\n    key3: new RegExp('[0-9]+', 'i'),\n    key4: '[datetime]',\n    key5: '(undefined)'\n};\n\ntap.test('jpv.validate', function (t) {\n    t.ok(jpv.validate(json, pattern, { debug: true }), 'Validate json Pattern');\n    t.ok(jpv.validate(json, pattern2, { debug: true }), 'Validate json Pattern');\n    t.ok(!jpv.validate(json, pattern, { debug: true, mode: 'strict' }), 'Validate json Pattern');\n    t.ok(!jpv.validate(json, pattern2, { debug: true, mode: 'strict' }), 'Validate json Pattern');\n    t.end();\n});\n"}, {"role": "assistant", "content": "\nconst tap = require('tap');\nconst jpv = require('../index.js');\n\nconst json = {\n    key1: 'OK',\n    key2: {\n        url: 'http://example.com'\n    },\n    key3: '17850',\n    key4: '2012-10-06T04:13:00+00:00'\n};\n\nconst pattern = {\n    key2: {\n        url: '[url]'\n    },\n    key3: new RegExp('[0-9]+', 'i'),\n    key4: '[datetime]'\n};\n\nconst pattern2 = {\n    key1: 'OK',\n    key2: {\n        url: '[url]'\n    },\n    key3: new RegExp('[0-9]+', 'i'),\n    key4: '[datetime]',\n    key5: '(undefined)'\n};\n\ntap.test('jpv.validate', function (t) {\n    t.ok(jpv.validate(json, pattern, { debug: true }), 'Validate json Pattern');\n    t.ok(jpv.validate(json, pattern2, { debug: true }), 'Validate json Pattern');\n    t.ok(!jpv.validate(json, pattern, { debug: true, mode: 'strict' }), 'Validate json Pattern');\n    t.ok(!jpv.validate(json, pattern2, { debug: true, mode: 'strict' }), 'Validate json Pattern');\n    t.end();\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\nconst tap = require('tap');\nconst { validate, is, and, or, not, typeOf } = require('../index.js');\n\nconst json = {\n    key: 'OK',\n    value: 999\n};\n\nconst validPattern1 = {\n    key: and(typeOf('string'), is('length(2)'), 'OK'),\n    value: or(is('lt(100)'), and( not('1000'), is('lte(999)'), is('gt(900)'))),\n};\n\nconst invalidPattern1 = {\n    key: and(typeOf('string'), is('length(2)'), 'OK'),\n    value: or(is('lt(100)'), and( not('1000'), is('lt(999)'), is('gt(900)'))),\n};\n\nconst invalidPattern2 = {\n    key: and(typeOf('string'), is('length(2)'), 'OK'),\n    value: or(is('lt(100)'), and( not(is('eq(999)')), is('lt(9999)'), is('gt(900)'))),\n};\n\n\n\n// Valid Case\ntap.test('Operators', function (t) {\n    t.ok(validate(json, validPattern1, { debug: true }), 'Valid case 1');\n    t.ok(!validate(json, invalidPattern1, { debug: true }), 'Invalid case 1');\n    t.ok(!validate(json, invalidPattern2, { debug: true }), 'Invalid case 2');\n\n\n    t.end();\n});\n"}, {"role": "assistant", "content": "\nconst tap = require('tap');\nconst { validate, is, and, or, not, typeOf } = require('../index.js');\n\nconst json = {\n    key: 'OK',\n    value: 999\n};\n\nconst validPattern1 = {\n    key: and(typeOf('string'), is('length(2)'), 'OK'),\n    value: or(is('lt(100)'), and(not('1000'), is('lte(999)'), is('gt(900)'))),\n};\n\nconst invalidPattern1 = {\n    key: and(typeOf('string'), is('length(2)'), 'OK'),\n    value: or(is('lt(100)'), and(not('1000'), is('lt(999)'), is('gt(900)'))),\n};\n\nconst invalidPattern2 = {\n    key: and(typeOf('string'), is('length(2)'), 'OK'),\n    value: or(is('lt(100)'), and(not(is('eq(999)')), is('lt(9999)'), is('gt(900)'))),\n};\n\n// Valid Case\ntap.test('Operators', function (t) {\n    t.ok(validate(json, validPattern1, { debug: true }), 'Valid case 1');\n    t.ok(!validate(json, invalidPattern1, { debug: true }), 'Invalid case 1');\n    t.ok(!validate(json, invalidPattern2, { debug: true }), 'Invalid case 2');\n\n    t.end();\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\nconst tap = require('tap');\nconst jpv = require('../index.js');\nconst {is} = jpv;\n\nconst json = {\n    key1: 'OK',\n    key2: NaN,\n};\n\nconst pattern = {\n    key1: 1,\n    key2: is('eq(10)')\n};\n\ntap.test('Special Cases', function (t) {\n    t.ok(!jpv.validate(json, pattern, { debug: true }), 'Case 1');\n    t.end();\n});\n"}, {"role": "assistant", "content": "\nconst tap = require('tap');\nconst jpv = require('../index.js');\nconst { is } = jpv;\n\nconst json = {\n    key1: 'OK',\n    key2: NaN\n};\n\nconst pattern = {\n    key1: 1,\n    key2: is('eq(10)')\n};\n\ntap.test('Special Cases', function (t) {\n    t.ok(!jpv.validate(json, pattern, { debug: true }), 'Case 1');\n    t.end();\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n//RUN: %hermes -O -target=HBC %s | %FileCheck --match-full-lines %s\n\nfunction func() {\n    print(arguments.length);\n}\n\ntry {\n    var a = []\n    a[8*1024*1024] = 100;\n    func.apply(null, a);\n} catch(e) {\n    print(\"caught:\", e.name, e.message);\n}\n//CHECK: caught: RangeError {{.*}}\n\nvar x = [];\nx.length = 4294967295;\n\nfor (var i = 0; i < 20; i++) {\n    x[i] = i;\n}\ntry {\n  func.apply(99, x);\n} catch (e) {\n    print(\"caught:\", e.name, e.message);\n}\n//CHECK: caught: RangeError {{.*}}\n"}, {"role": "assistant", "content": "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n//RUN: %hermes -O -target=HBC %s | %FileCheck --match-full-lines %s\n\nfunction func() {\n    print(arguments.length);\n}\n\ntry {\n    var a = []\n    a[8*1024*1024] = 100;\n    func.apply(null, a);\n} catch(e) {\n    print(\"caught:\", e.name, e.message);\n}\n//CHECK: caught: RangeError {{.*}}\n\nvar x = [];\nx.length = 4294967295;\n\nfor (var i = 0; i < 20; i++) {\n    x[i] = i;\n}\ntry {\n  func.apply(99, x);\n} catch (e) {\n    print(\"caught:\", e.name, e.message);\n}\n//CHECK: caught: RangeError {{.*}}\n\ntry {\n  v0 = [1.1];\n  function v1() {\n    v1(...v0);\n  }\n  v1();\n} catch (e) {\n    print(\"caught:\", e.name, e.message);\n}\n//CHECK: caught: RangeError {{.*}}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "*.class\n*.war\n*.ear\n/target\n\n*~\n.classpath\n*.iml\n.idea\n.project\n.attach_pid*\n1.log\nlogs\n.settings\ntarget\nhs_err*.log\nweb/src/backup\nweb/src/main/webapp/post\nweb/src/main/webapp/_cache\nweb/src/main/webapp/attached\nweb/src/main/webapp/WEB-INF/classes\nweb/src/main/webapp/WEB-INF/plugins/*\nweb/src/main/webapp/include/templates/template*\n\nweb/src/main/webapp/include/templates/README.md\nweb/src/main/webapp/include/templates/*.sh\nweb/src/main/webapp/include/templates/.gitignore\nweb/log\nweb/logs\nrebel.xml\ntomcat.*\n*.jar\n!.mvn/wrapper/maven-wrapper.jar\n*.hprof\nlog/\nweb/sim.pid\nsim.pid\n.DS_Store\n.vscode\ntomcat.*"}, {"role": "assistant", "content": "*.class\n*.war\n*.ear\n/target\n\n*~\n.classpath\n*.iml\n.idea\n.project\n.attach_pid*\n1.log\nlogs\n.settings\ntarget\nhs_err*.log\nweb/src/backup\nweb/src/main/webapp/post\nweb/src/main/webapp/_cache\nweb/src/main/webapp/attached\nweb/src/main/webapp/WEB-INF/classes\nweb/src/main/webapp/WEB-INF/plugins/*\nweb/src/main/webapp/include/templates/template*\n\nweb/src/main/webapp/include/templates/README.md\nweb/src/main/webapp/include/templates/*.sh\nweb/src/main/webapp/include/templates/.gitignore\nweb/log\nweb/logs\nrebel.xml\ntomcat.*\n*.jar\n!.mvn/wrapper/maven-wrapper.jar\n*.hprof\nlog/\nweb/sim.pid\nsim.pid\n.DS_Store\n.vscode\ntomcat.*\n/web/src/main/webapp/include/templates/default-2019/\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "target\n.classpath\n.metadata\n.project\ndoc\n"}, {"role": "assistant", "content": "target\n.classpath\n.metadata\n.project\ndoc\n*.class\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "target\n.classpath\n.metadata\n.project\ndoc\n"}, {"role": "assistant", "content": "target\n.classpath\n.metadata\n.project\ndoc\n*.class\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "target\n.classpath\n.metadata\n.project\ndoc\n"}, {"role": "assistant", "content": "target\n.classpath\n.metadata\n.project\ndoc\n*.class\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "target\n.classpath\n.metadata\n.project\ndoc\n"}, {"role": "assistant", "content": "target\n.classpath\n.metadata\n.project\ndoc\n*.class\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "target\n.classpath\n.metadata\n.project\ndoc\n"}, {"role": "assistant", "content": "target\n.classpath\n.metadata\n.project\ndoc\n*.class\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "target\n.classpath\n.metadata\n.project\ndoc\n"}, {"role": "assistant", "content": "target\n.classpath\n.metadata\n.project\ndoc\n*.class\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "language: ruby\nsudo: false\nenv:\n  - \"RABL_GEM=rabl\"\n  - \"RABL_GEM=rabl-rails\"\n\nrvm:\n  - 2.2.10\n  - 2.3.7\n  - 2.4.4\n  - 2.5.1\n  - ruby-head\n"}, {"role": "assistant", "content": "language: ruby\nsudo: false\nenv:\n  - \"RABL_GEM=rabl\"\n  - \"RABL_GEM=rabl-rails\"\n\nrvm:\n  - 2.2.10\n  - 2.3.8\n  - 2.4.10\n  - 2.5.8\n  - 2.6.6\n  - 2.7.1\n  - ruby-head\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "class Gon\n  module JsonDumper\n    def self.dump(object)\n      MultiJson.dump object,\n        mode: :compat, escape_mode: :xss_safe, time_format: :ruby\n    end\n  end\nend\n"}, {"role": "assistant", "content": "class Gon\n  module JsonDumper\n    # Taken from ERB::Util\n    JSON_ESCAPE_REGEXP\t=\t/[\\u2028\\u2029&><]/u\n    JSON_ESCAPE\t=\t{\n      \"&\" => '\\u0026',\n      \">\" => '\\u003e',\n      \"<\" => '\\u003c',\n      \"\\u2028\" => '\\u2028',\n      \"\\u2029\" => '\\u2029'\n    }\n\n    def self.dump(object)\n      dumped_json = MultiJson.dump object,\n        mode: :compat, escape_mode: :xss_safe, time_format: :ruby\n      escape(dumped_json)\n    end\n\n    def self.escape(json)\n      json.gsub(JSON_ESCAPE_REGEXP, JSON_ESCAPE)\n    end\n  end\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "class Gon\n  VERSION = '6.3.2'\nend\n"}, {"role": "assistant", "content": "class Gon\n  VERSION = '6.4.0'\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "import { makeCall } from '/imports/ui/services/api';\nimport Polls from '/imports/api/polls';\n\nconst MAX_CHAR_LENGTH = 5;\n\nconst mapPolls = () => {\n  const poll = Polls.findOne({});\n  if (!poll) {\n    return { pollExists: false };\n  }\n\n  const { answers } = poll;\n  let stackOptions = false;\n\n  answers.map((obj) => {\n    if (stackOptions) return obj;\n    if (obj.key.length > MAX_CHAR_LENGTH) {\n      stackOptions = true;\n    }\n    return obj;\n  });\n\n  const amIRequester = poll.requester !== 'userId';\n\n  return {\n    poll: {\n      answers: poll.answers,\n      pollId: poll.id,\n      stackOptions,\n    },\n    pollExists: true,\n    amIRequester,\n    handleVote(pollId, answerId) {\n      makeCall('publishVote', pollId, answerId.id);\n    },\n  };\n};\n\nexport default { mapPolls };\n"}, {"role": "assistant", "content": "import { makeCall } from '/imports/ui/services/api';\nimport Polls from '/imports/api/polls';\nimport { debounce } from 'lodash';\n\nconst MAX_CHAR_LENGTH = 5;\n\nconst handleVote = (pollId, answerId) => {\n  makeCall('publishVote', pollId, answerId.id);\n};\n\nconst mapPolls = () => {\n  const poll = Polls.findOne({});\n  if (!poll) {\n    return { pollExists: false };\n  }\n\n  const { answers } = poll;\n  let stackOptions = false;\n\n  answers.map((obj) => {\n    if (stackOptions) return obj;\n    if (obj.key.length > MAX_CHAR_LENGTH) {\n      stackOptions = true;\n    }\n    return obj;\n  });\n\n  const amIRequester = poll.requester !== 'userId';\n\n  return {\n    poll: {\n      answers: poll.answers,\n      pollId: poll.id,\n      stackOptions,\n    },\n    pollExists: true,\n    amIRequester,\n    handleVote: debounce(handleVote, 500, { leading: true, trailing: false }),\n  };\n};\n\nexport default { mapPolls };\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "package platform\n\nimport (\n\t\"os\"\n\n\t\"github.com/dropbox/godropbox/errors\"\n\t\"github.com/hectane/go-acl\"\n\t\"github.com/pritunl/pritunl-client-electron/service/errortypes\"\n\t\"golang.org/x/sys/windows\"\n)\n\nfunc MkdirSecure(pth string) (err error) {\n\terr = os.MkdirAll(pth, 0755)\n\tif err != nil {\n\t\terr = &errortypes.WriteError{\n\t\t\terrors.Wrap(err, \"utils: Failed to create directory\"),\n\t\t}\n\t\treturn\n\t}\n\n\terr = acl.Apply(\n\t\tpth,\n\t\ttrue,\n\t\tfalse,\n\t\tacl.GrantName(windows.GENERIC_ALL, \"CREATOR OWNER\"),\n\t\tacl.GrantName(windows.GENERIC_ALL, \"SYSTEM\"),\n\t\tacl.GrantName(windows.GENERIC_ALL, \"Administrators\"),\n\t)\n\tif err != nil {\n\t\terr = &errortypes.WriteError{\n\t\t\terrors.Wrap(err, \"utils: Failed to acl directory\"),\n\t\t}\n\t\treturn\n\t}\n\n\treturn\n}\n"}, {"role": "assistant", "content": "package platform\n\nimport (\n\t\"os\"\n\n\t\"github.com/dropbox/godropbox/errors\"\n\t\"github.com/hectane/go-acl\"\n\t\"github.com/pritunl/pritunl-client-electron/service/errortypes\"\n\t\"golang.org/x/sys/windows\"\n)\n\nfunc MkdirSecure(pth string) (err error) {\n\terr = os.MkdirAll(pth, 0755)\n\tif err != nil {\n\t\terr = &errortypes.WriteError{\n\t\t\terrors.Wrap(err, \"utils: Failed to create directory\"),\n\t\t}\n\t\treturn\n\t}\n\n\terr = acl.Apply(\n\t\tpth,\n\t\ttrue,\n\t\tfalse,\n\t\tacl.GrantName(windows.GENERIC_ALL, \"SYSTEM\"),\n\t\tacl.GrantName(windows.GENERIC_ALL, \"Administrators\"),\n\t)\n\tif err != nil {\n\t\terr = &errortypes.WriteError{\n\t\t\terrors.Wrap(err, \"utils: Failed to acl directory\"),\n\t\t}\n\t\treturn\n\t}\n\n\treturn\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";\n"}, {"role": "assistant", "content": "/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "/**\n * SPDX-FileCopyrightText: 2013 Albert Vaca <albertvaka@gmail.com>\n * SPDX-FileCopyrightText: 2014 Alejandro Fiestas Olivares <afiestas@kde.org>\n *\n * SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL\n */\n\n#include \"socketlinereader.h\"\n\nSocketLineReader::SocketLineReader(QSslSocket* socket, QObject* parent)\n    : QObject(parent)\n    , m_socket(socket)\n{\n    connect(m_socket, &QIODevice::readyRead,\n            this, &SocketLineReader::dataReceived);\n}\n\nvoid SocketLineReader::dataReceived()\n{\n    while (m_socket->canReadLine()) {\n        const QByteArray line = m_socket->readLine();\n        if (line.length() > 1) { //we don't want a single \\n\n            m_packets.enqueue(line);\n        }\n    }\n\n    //If we still have things to read from the socket, call dataReceived again\n    //We do this manually because we do not trust readyRead to be emitted again\n    //So we call this method again just in case.\n    if (m_socket->bytesAvailable() > 0) {\n        QMetaObject::invokeMethod(this, \"dataReceived\", Qt::QueuedConnection);\n        return;\n    }\n\n    //If we have any packets, tell it to the world.\n    if (!m_packets.isEmpty()) {\n        Q_EMIT readyRead();\n    }\n}\n"}, {"role": "assistant", "content": "/**\n * SPDX-FileCopyrightText: 2013 Albert Vaca <albertvaka@gmail.com>\n * SPDX-FileCopyrightText: 2014 Alejandro Fiestas Olivares <afiestas@kde.org>\n *\n * SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL\n */\n\n#include \"socketlinereader.h\"\n\nSocketLineReader::SocketLineReader(QSslSocket* socket, QObject* parent)\n    : QObject(parent)\n    , m_socket(socket)\n{\n    connect(m_socket, &QIODevice::readyRead,\n            this, &SocketLineReader::dataReceived);\n}\n\nvoid SocketLineReader::dataReceived()\n{\n    while (m_socket->canReadLine()) {\n        const QByteArray line = m_socket->readLine();\n        if (line.length() > 1) { //we don't want a single \\n\n            m_packets.enqueue(line);\n        }\n    }\n\n    //If we have any packets, tell it to the world.\n    if (!m_packets.isEmpty()) {\n        Q_EMIT readyRead();\n    }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "namespace DatabaseSchemaReader.SqlGen\r\n{\r\n    /// <summary>\r\n    /// Generate Ddl for all tables in schema.\r\n    /// </summary>\r\n    public interface ITablesGenerator\r\n    {\r\n        /// <summary>\r\n        /// Indicates whether schema will be written in DDL\r\n        /// </summary>\r\n        /// <value><c>true</c> if schema is written; otherwise, <c>false</c>.</value>\r\n        bool IncludeSchema { get; set; }\r\n\r\n        /// <summary>\r\n        /// Writes this ddl script.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        string Write();\r\n    }\r\n}"}, {"role": "assistant", "content": "namespace DatabaseSchemaReader.SqlGen\r\n{\r\n    /// <summary>\r\n    /// Generate Ddl for all tables in schema.\r\n    /// </summary>\r\n    public interface ITablesGenerator\r\n    {\r\n        /// <summary>\r\n        /// Indicates whether schema will be written in DDL\r\n        /// </summary>\r\n        /// <value><c>true</c> if schema is written; otherwise, <c>false</c>.</value>\r\n        bool IncludeSchema { get; set; }\r\n\r\n        /// <summary>\r\n        /// Escape the table and column names\r\n        /// </summary>\r\n        bool EscapeNames { get; set; }\r\n\r\n        /// <summary>\r\n        /// Writes this ddl script.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        string Write();\r\n    }\r\n}"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\ufeffusing System.Text;\r\nusing DatabaseSchemaReader.DataSchema;\r\n\r\nnamespace DatabaseSchemaReader.SqlGen.MySql\r\n{\r\n\r\n    class TablesGenerator : TablesGeneratorBase\r\n    {\r\n        public TablesGenerator(DatabaseSchema schema)\r\n            : base(schema)\r\n        {\r\n        }\r\n\r\n\r\n        protected override ConstraintWriterBase LoadConstraintWriter(DatabaseTable table)\r\n        {\r\n            return new ConstraintWriter(table);\r\n        }\r\n\r\n        protected override ITableGenerator LoadTableGenerator(DatabaseTable table)\r\n        {\r\n            return new TableGenerator(table);\r\n        }\r\n\r\n        protected override ISqlFormatProvider SqlFormatProvider()\r\n        {\r\n            return new SqlFormatProvider();\r\n        }\r\n\r\n        protected override void WriteDrops(StringBuilder sb)\r\n        {\r\n            sb.AppendLine(DropTables.Write(Schema, SqlFormatProvider()));\r\n        }\r\n    }\r\n}\r\n"}, {"role": "assistant", "content": "\ufeffusing System.Text;\r\nusing DatabaseSchemaReader.DataSchema;\r\n\r\nnamespace DatabaseSchemaReader.SqlGen.MySql\r\n{\r\n\r\n    class TablesGenerator : TablesGeneratorBase\r\n    {\r\n        public TablesGenerator(DatabaseSchema schema)\r\n            : base(schema)\r\n        {\r\n        }\r\n\r\n\r\n        protected override ConstraintWriterBase LoadConstraintWriter(DatabaseTable table)\r\n        {\r\n            return new ConstraintWriter(table);\r\n        }\r\n\r\n        protected override ITableGenerator LoadTableGenerator(DatabaseTable table)\r\n        {\r\n            return new TableGenerator(table);\r\n        }\r\n\r\n        protected override ISqlFormatProvider SqlFormatProvider()\r\n        {\r\n            return new SqlFormatProvider();\r\n        }\r\n\r\n        protected override void WriteDrops(StringBuilder sb)\r\n        {\r\n            sb.AppendLine(DropTables.Write(Schema, SqlFormatProvider(), EscapeNames));\r\n        }\r\n    }\r\n}\r\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "// +build !windows\n\npackage errors\n\nimport \"syscall\"\n\n// Abort will terminate & sends SIGTERM to process\nfunc Abort(i ...int) {\n\tpgid, err := syscall.Getpgid(syscall.Getpid())\n\tif err != nil {\n\t\tExit(err.Error())\n\t}\n\n\t// nolint:errcheck\n\tsyscall.Kill(-pgid, syscall.SIGTERM)\n}\n"}, {"role": "assistant", "content": "// +build !windows\n\npackage errors\n\nimport (\n\t\"os\"\n\t\"syscall\"\n)\n\n// Abort will terminate & sends SIGTERM to process\nfunc Abort(i ...int) {\n\tif _, err := os.Stat(\"/.dockerenv\"); err == nil {\n\t\tos.Exit(i[0])\n\t}\n\n\tpgid, err := syscall.Getpgid(syscall.Getpid())\n\tif err != nil {\n\t\tExit(err.Error())\n\t}\n\n\t// nolint:errcheck\n\tsyscall.Kill(-pgid, syscall.SIGTERM)\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const {escapeRegExp, size, isString} = require('lodash');\nconst {SECRET_REPLACEMENT, SECRET_MIN_SIZE} = require('./definitions/constants');\n\nmodule.exports = (env) => {\n  const toReplace = Object.keys(env).filter((envVar) => {\n    // https://github.com/semantic-release/semantic-release/issues/1558\n    if (envVar === 'GOPRIVATE') {\n      return false;\n    }\n\n    return /token|password|credential|secret|private/i.test(envVar) && size(env[envVar].trim()) >= SECRET_MIN_SIZE;\n  });\n\n  const regexp = new RegExp(toReplace.map((envVar) => escapeRegExp(env[envVar])).join('|'), 'g');\n  return (output) =>\n    output && isString(output) && toReplace.length > 0 ? output.toString().replace(regexp, SECRET_REPLACEMENT) : output;\n};\n"}, {"role": "assistant", "content": "const {escapeRegExp, size, isString} = require('lodash');\nconst {SECRET_REPLACEMENT, SECRET_MIN_SIZE} = require('./definitions/constants');\n\nmodule.exports = (env) => {\n  const toReplace = Object.keys(env).filter((envVar) => {\n    // https://github.com/semantic-release/semantic-release/issues/1558\n    if (envVar === 'GOPRIVATE') {\n      return false;\n    }\n\n    return /token|password|credential|secret|private/i.test(envVar) && size(env[envVar].trim()) >= SECRET_MIN_SIZE;\n  });\n\n  const regexp = new RegExp(\n    toReplace\n      .map((envVar) => `${escapeRegExp(env[envVar])}|${encodeURI(escapeRegExp(env[envVar]))}`)\n      .join('|'),\n    'g'\n  );\n  return (output) =>\n    output && isString(output) && toReplace.length > 0 ? output.toString().replace(regexp, SECRET_REPLACEMENT) : output;\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "/*\n * Copyright (c) 2020 Gobierno de Espa\u00f1a\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * SPDX-License-Identifier: MPL-2.0\n */\n\npackage es.gob.radarcovid.datamanager.repository\n\nimport es.gob.radarcovid.models.domain.ExposureInfo\n\ninterface DomainRepository {\n\n    var exposureInfo: ExposureInfo?\n\n}"}, {"role": "assistant", "content": "/*\n * Copyright (c) 2020 Gobierno de Espa\u00f1a\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * SPDX-License-Identifier: MPL-2.0\n */\n\npackage es.gob.radarcovid.datamanager.repository\n\nimport io.reactivex.rxjava3.core.Completable\n\ninterface FakeInfectionReportRepository {\n\n    fun notifyFakeInfected(authCode: String): Completable\n\n}"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# frozen_string_literal: true\nmodule Nokogiri\n  module XML\n    class << self\n      ###\n      # Create a new Nokogiri::XML::RelaxNG document from +string_or_io+.\n      # See Nokogiri::XML::RelaxNG for an example.\n      def RelaxNG string_or_io\n        RelaxNG.new(string_or_io)\n      end\n    end\n\n    ###\n    # Nokogiri::XML::RelaxNG is used for validating XML against a\n    # RelaxNG schema.\n    #\n    # == Synopsis\n    #\n    # Validate an XML document against a RelaxNG schema.  Loop over the errors\n    # that are returned and print them out:\n    #\n    #   schema  = Nokogiri::XML::RelaxNG(File.open(ADDRESS_SCHEMA_FILE))\n    #   doc     = Nokogiri::XML(File.open(ADDRESS_XML_FILE))\n    #\n    #   schema.validate(doc).each do |error|\n    #     puts error.message\n    #   end\n    #\n    # The list of errors are Nokogiri::XML::SyntaxError objects.\n    class RelaxNG < Nokogiri::XML::Schema\n    end\n  end\nend\n"}, {"role": "assistant", "content": "# frozen_string_literal: true\nmodule Nokogiri\n  module XML\n    class << self\n      ###\n      # Create a new Nokogiri::XML::RelaxNG document from +string_or_io+.\n      # See Nokogiri::XML::RelaxNG for an example.\n      def RelaxNG(string_or_io, options = ParseOptions::DEFAULT_SCHEMA)\n        RelaxNG.new(string_or_io, options)\n      end\n    end\n\n    ###\n    # Nokogiri::XML::RelaxNG is used for validating XML against a\n    # RelaxNG schema.\n    #\n    # == Synopsis\n    #\n    # Validate an XML document against a RelaxNG schema.  Loop over the errors\n    # that are returned and print them out:\n    #\n    #   schema  = Nokogiri::XML::RelaxNG(File.open(ADDRESS_SCHEMA_FILE))\n    #   doc     = Nokogiri::XML(File.open(ADDRESS_XML_FILE))\n    #\n    #   schema.validate(doc).each do |error|\n    #     puts error.message\n    #   end\n    #\n    # The list of errors are Nokogiri::XML::SyntaxError objects.\n    class RelaxNG < Nokogiri::XML::Schema\n    end\n  end\nend\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "1.58.1\n"}, {"role": "assistant", "content": "1.58.2\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "module github.com/datacharmer/dbdeployer\n\ngo 1.12\n\nrequire (\n\tgithub.com/alexeyco/simpletable v0.0.0-20180729223640-1fa9009f1080\n\tgithub.com/araddon/dateparse v0.0.0-20190622164848-0fb0a474d195\n\tgithub.com/dustin/go-humanize v1.0.0\n\tgithub.com/go-sql-driver/mysql v1.4.1\n\tgithub.com/nightlyone/lockfile v0.0.0-20180618180623-0ad87eef1443\n\tgithub.com/pkg/errors v0.8.1\n\tgithub.com/spf13/cobra v1.0.0\n\tgithub.com/spf13/pflag v1.0.3\n\tgithub.com/stretchr/testify v1.4.0 // indirect\n\tgithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8\n\tgolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550\n\tgolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b // indirect\n)\n"}, {"role": "assistant", "content": "module github.com/datacharmer/dbdeployer\n\ngo 1.12\n\nrequire (\n\tgithub.com/alexeyco/simpletable v0.0.0-20180729223640-1fa9009f1080\n\tgithub.com/araddon/dateparse v0.0.0-20190622164848-0fb0a474d195\n\tgithub.com/dustin/go-humanize v1.0.0\n\tgithub.com/go-sql-driver/mysql v1.4.1\n\tgithub.com/nightlyone/lockfile v0.0.0-20180618180623-0ad87eef1443\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/spf13/cobra v1.1.1\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/stretchr/testify v1.4.0 // indirect\n\tgithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8\n\tgolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9\n\tgolang.org/x/sys v0.0.0-20201119102817-f84b799fce68 // indirect\n)\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "sudo: false\nlanguage: cpp\nnotifications:\n  email: false\nenv:\n  matrix:\n  - TRAVIS_NODE_VERSION=\"6\"\n  - TRAVIS_NODE_VERSION=\"8\"\n  - TRAVIS_NODE_VERSION=\"10\"\n  - TRAVIS_NODE_VERSION=\"12\"\n  - TRAVIS_NODE_VERSION=\"13\"\ninstall:\n  - rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && source ~/.nvm/nvm.sh && nvm install $TRAVIS_NODE_VERSION\n  - node --version\n  - npm --version\n  - npm install\n  - ssh -V\nscript: npm test\n"}, {"role": "assistant", "content": "sudo: false\nlanguage: cpp\nnotifications:\n  email: false\nenv:\n  matrix:\n  - TRAVIS_NODE_VERSION=\"10\"\n  - TRAVIS_NODE_VERSION=\"12\"\n  - TRAVIS_NODE_VERSION=\"14\"\ninstall:\n  - rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && source ~/.nvm/nvm.sh && nvm install $TRAVIS_NODE_VERSION\n  - node --version\n  - npm --version\n  - npm install\n  - ssh -V\nscript: npm test\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{ \"name\": \"ssh2\",\n  \"version\": \"0.8.9\",\n  \"author\": \"Brian White <mscdex@mscdex.net>\",\n  \"description\": \"SSH2 client and server modules written in pure JavaScript for node.js\",\n  \"main\": \"./lib/client\",\n  \"engines\": { \"node\": \">=5.2.0\" },\n  \"dependencies\": {\n    \"ssh2-streams\": \"~0.4.10\"\n  },\n  \"scripts\": {\n    \"test\": \"node test/test.js\"\n  },\n  \"keywords\": [ \"ssh\", \"ssh2\", \"sftp\", \"secure\", \"shell\", \"exec\", \"remote\", \"client\" ],\n  \"licenses\": [ { \"type\": \"MIT\", \"url\": \"http://github.com/mscdex/ssh2/raw/master/LICENSE\" } ],\n  \"repository\" : { \"type\": \"git\", \"url\": \"http://github.com/mscdex/ssh2.git\" }\n}\n"}, {"role": "assistant", "content": "{\n  \"name\": \"ssh2\",\n  \"version\": \"1.0.0-beta.0\",\n  \"author\": \"Brian White <mscdex@mscdex.net>\",\n  \"description\": \"SSH2 client and server modules written in pure JavaScript for node.js\",\n  \"main\": \"./lib/client\",\n  \"engines\": {\n    \"node\": \">=10.16.0\"\n  },\n  \"dependencies\": {\n    \"asn1\": \"^0.2.4\",\n    \"bcrypt-pbkdf\": \"^1.0.2\"\n  },\n  \"optionalDependencies\": {\n    \"cpu-features\": \"0.0.2\",\n    \"nan\": \"^2.14.1\"\n  },\n  \"scripts\": {\n    \"install\": \"node install.js\",\n    \"rebuild\": \"node install.js\",\n    \"test\": \"node test/test.js\"\n  },\n  \"keywords\": [\n    \"ssh\",\n    \"ssh2\",\n    \"sftp\",\n    \"secure\",\n    \"shell\",\n    \"exec\",\n    \"remote\",\n    \"client\"\n  ],\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://github.com/mscdex/ssh2/raw/master/LICENSE\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/mscdex/ssh2.git\"\n  }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "var spawn = require('child_process').spawn,\n    join = require('path').join;\n\nvar files = require('fs').readdirSync(__dirname).filter(function(f) {\n      return (f.substr(0, 5) === 'test-');\n    }).map(function(f) {\n      return join(__dirname, f);\n    }),\n    f = -1;\n\nfunction next() {\n  if (++f < files.length) {\n    spawn(process.argv[0], [ files[f] ], { stdio: 'inherit' })\n      .on('exit', function(code) {\n        if (code === 0)\n          process.nextTick(next);\n        else\n          process.exit(code);\n      });\n  }\n}\nnext();\n"}, {"role": "assistant", "content": "'use strict';\n\nconst { execSync } = require('child_process');\nconst { readdirSync } = require('fs');\nconst { join } = require('path');\n\nfor (const filename of readdirSync(__dirname)) {\n  if (filename.startsWith('test-')) {\n    const path = join(__dirname, filename);\n    console.log(`> Running ${filename} ...`);\n    execSync(`${process.argv[0]} ${path}`, { stdio: 'inherit' });\n  }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "<?php\n\nclass Security{\n\n    public static function vulnerableExtensions(){\n        return '/^.*\\.('.implode('|',[\"php\",\"php5\",\"php7\",\"phar\",\"phtml\"]).')$/i';\n    }\n\n    public static function isExecutable($file){\n        return preg_match(self::vulnerableExtensions(), strtolower($file));\n    }\n\n\n}"}, {"role": "assistant", "content": "<?php\n\nclass Security{\n\n    public static function vulnerableExtensions(){\n        return '/^.*\\.('.implode('|',[\"php\",\"php5\",\"php7\",\"phar\",\"phtml\",\"htaccess\"]).')$/i';\n    }\n\n    public static function isExecutable($file){\n        return preg_match(self::vulnerableExtensions(), strtolower($file));\n    }\n\n\n}"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "\ufeffusing SmartStore.Web.Framework.Modelling;\n\nnamespace SmartStore.DevTools.Models\n{\n\tpublic class BackendExtensionModel : ModelBase\n\t{\n\t\tpublic string Welcome { get; set; }\n\n        public int ProductId { get; set; }\n    }\n}"}, {"role": "assistant", "content": "\ufeffusing SmartStore.Web.Framework.Modelling;\n\nnamespace SmartStore.DevTools.Models\n{\n\t[CustomModelPart]\n\tpublic class BackendExtensionModel : ModelBase\n\t{\n\t\tpublic string Welcome { get; set; }\n        public int ProductId { get; set; }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "language: node_js\nnode_js:\n  - \"8\"\n  - \"6\"\nbefore_script:\n  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n  - chmod +x ./cc-test-reporter\n  - ./cc-test-reporter before-build\nscript: npm run lint && npm run test-on-travis\nafter_script:\n  - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT\n"}, {"role": "assistant", "content": "language: node_js\nnode_js:\n  - \"12\"\n  - \"10\"\nbefore_script:\n  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n  - chmod +x ./cc-test-reporter\n  - ./cc-test-reporter before-build\nscript: npm run lint && npm run test-on-travis\nafter_script:\n  - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "require('./1-normal');\nrequire('./2-with-init');\nrequire('./3-symbol-property');\nrequire('./4-array-params');\nrequire('./5-array-value');\nrequire('./6-option-params');\n"}, {"role": "assistant", "content": "require('./1-normal');\nrequire('./2-with-init');\nrequire('./3-symbol-property');\nrequire('./4-array-params');\nrequire('./5-array-value');\nrequire('./6-option-params');\nrequire('./7-no-proto-polution');\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{\n  \"name\": \"deephas\",\n  \"version\": \"1.0.5\",\n  \"description\": \"get, set or test for a value in a javascript object\",\n  \"main\": \"deepHas.js\",\n  \"scripts\": {\n    \"test\": \"./runTests.sh\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:sharpred/deepHas.git\"\n  },\n  \"keywords\": [\n    \"nested\",\n    \"object\",\n    \"key\"\n  ],\n  \"author\": \"Paul Ryan <paul.ryan@stepupsoftware.co.uk>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/sharpred/deepHas/issues\"\n  },\n  \"homepage\": \"https://github.com/sharpred/deepHas\",\n  \"devDependencies\": {\n    \"should\": \">=8.0.1\"\n  }\n}\n"}, {"role": "assistant", "content": "{\n  \"name\": \"deephas\",\n  \"version\": \"1.0.6\",\n  \"description\": \"get, set or test for a value in a javascript object\",\n  \"main\": \"deepHas.js\",\n  \"scripts\": {\n    \"test\": \"./runTests.sh\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:sharpred/deepHas.git\"\n  },\n  \"keywords\": [\n    \"nested\",\n    \"object\",\n    \"key\"\n  ],\n  \"author\": \"Paul Ryan <paul.ryan@stepupsoftware.co.uk>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/sharpred/deepHas/issues\"\n  },\n  \"homepage\": \"https://github.com/sharpred/deepHas\",\n  \"devDependencies\": {\n    \"should\": \">=8.0.1\"\n  }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "#!/bin/bash\nnode tests/testHas.js\nnode tests/testGet.js\nnode tests/testExports.js\nnode tests/testSet.js"}, {"role": "assistant", "content": "#!/bin/bash\nnode tests/testHas.js\nnode tests/testGet.js\nnode tests/testExports.js\nnode tests/testSet.js\nnode tests/testVulnerability.js"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "node_modules\nnpm-debug.log\ncoverage\n*.pid\n\n\n**/.DS_Store\n\ntmp\nlocal\nbuild\n"}, {"role": "assistant", "content": "# Repo-wide\n# -----------------------------------------------------------------------------\n\n# Dirs\nnode_modules/\n\n# OS files\n.DS_Store\nThumbs.db\nDesktop.ini\n\n# Runtime files\n*.lock\n*.log\n*.pid\n*.pid.lock\n\n# Repo root\n# -----------------------------------------------------------------------------\n\n# Technical output\n/build/\n/coverage/\n/dist/\n/logs/\n/pids/\n/tmp/\n/.nyc_output/\n\n# Local data\n/local/\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# v2.1\n\n* Add `breadcrumbs` method.\n\n# v2.0\n\nRefactored and reviewed 1.0 version. Has some breaking changes:\n\n* Path could be empty array or string. This will be interpreted as path\n  to target itself.\n* Update methods always return target.\n\n# v1.0\n\nInitial version.\n\n* Add methods:\n    * set\n    * get\n    * has\n    * call\n    * method\n"}, {"role": "assistant", "content": "# CHANGELOG\n\n### v2.3\n\n* Fix security vulnerabilities:\n  * Prototype pollution in methods `set`, `push` and `at`.\n* Fix inconsistency in method `method` when calling on function as a target.\n  Previousely it was bind to itself, now to null.\n\n### v2.1\n\n* Add `breadcrumbs` method.\n\n### v2.0\n\nRefactored and reviewed 1.0 version. Has some breaking changes:\n\n* Path could be empty array or string. This will be interpreted as path\n  to target itself.\n* Update methods always return target.\n\n### v1.0\n\nInitial version.\n\n* Add methods:\n    * set\n    * get\n    * has\n    * call\n    * method\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{\n  \"name\": \"ntesseract\",\n  \"version\": \"0.2.8\",\n  \"authors\": [\n    \"Tao Yuan <towyuan@outlook.com>\",\n    \"Desmond Morris <hi@desmondmorris.com>\"\n  ],\n  \"description\": \"A simple wrapper for the Tesseract OCR package\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/taoyuan/ntesseract/\"\n  },\n  \"keywords\": [\n    \"tesseract\",\n    \"ocr\",\n    \"text recognition\"\n  ],\n  \"dependencies\": {\n    \"glob\": \"^7.1.6\",\n    \"lodash.assign\": \"^4.2.0\",\n    \"node-uuid\": \"^1.4.7\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.2.0\",\n    \"mocha\": \"~8.2.1\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"license\": \"MIT\",\n  \"engine\": {\n    \"node\": \">=0.6\"\n  }\n}\n"}, {"role": "assistant", "content": "{\n  \"name\": \"ntesseract\",\n  \"version\": \"0.2.8\",\n  \"authors\": [\n    \"Tao Yuan <towyuan@outlook.com>\",\n    \"Desmond Morris <hi@desmondmorris.com>\"\n  ],\n  \"description\": \"A simple wrapper for the Tesseract OCR package\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/taoyuan/ntesseract/\"\n  },\n  \"keywords\": [\n    \"tesseract\",\n    \"ocr\",\n    \"text recognition\"\n  ],\n  \"dependencies\": {\n    \"glob\": \"^7.1.6\",\n    \"lodash.assign\": \"^4.2.0\",\n    \"node-uuid\": \"^1.4.7\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.2.0\",\n    \"mocha\": \"~8.2.1\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"license\": \"MIT\",\n  \"engine\": {\n    \"node\": \">=8.0\"\n  }\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "[test]\nvalue=key\n[__proto__]\npolluted=\"polluted\"\n[other]\n__proto__.path_polluted=\"polluted\""}, {"role": "assistant", "content": "[test]\nvalue=key\n[__proto__]\npolluted=\"polluted\"\n[other]\n__proto__.path_polluted=\"polluted\"\n[constructor]\nprototype.polluted = polluted\n[prototype]\npolluted = polluted"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "export const $Errors: unique symbol = Symbol('Errors of parsing');\n\nexport class ParsingError extends Error {\n  constructor(line: string, lineNumber: number) {\n    super(`Unsupported type of line: [${lineNumber}]\"${line}\"`);\n    this.line = line;\n    this.lineNumber = lineNumber;\n  }\n\n  public line: string;\n\n  public lineNumber: number;\n}\n"}, {"role": "assistant", "content": "export class ParsingError extends Error {\n  constructor(line: string, lineNumber: number) {\n    super(`Unsupported type of line: [${lineNumber}] \"${line}\"`);\n    this.line = line;\n    this.lineNumber = lineNumber;\n  }\n\n  public line: string;\n\n  public lineNumber: number;\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "export * from './errors';\nexport * from './parse';\nexport * from './stringify';\n"}, {"role": "assistant", "content": "export * from './errors';\nexport * from './parse';\nexport * from './stringify';\nexport * from './proto';\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "export interface ICustomTyping {\n  (val: string, section: string, key: string): any\n}\n"}, {"role": "assistant", "content": "export interface ICustomTyping {\n  (val: string, section: string | symbol, key: string): any\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "import { $Errors, ParsingError } from '../errors';\nimport { IIniObjectSection } from './ini-object-section';\n\nexport interface IIniObject extends IIniObjectSection {\n  [$Errors]?: ParsingError[];\n}\n"}, {"role": "assistant", "content": "import { $Errors, ParsingError } from '../errors';\nimport { IIniObjectSection } from './ini-object-section';\nimport { $Proto } from '../proto';\n\nexport interface IIniObject extends IIniObjectSection {\n  [$Errors]?: ParsingError[];\n  [$Proto]?: IIniObjectSection;\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "module.exports = {\n\tlist: require('./list'),\n\tmodified: require('./modified'),\n\tremote: require('./remote'),\n\treset: require('./reset'),\n\ttag: require('./tag'),\n\tunadded: require('./unadded'),\n};\n"}, {"role": "assistant", "content": "module.exports = {\n\tmodified: require('./modified'),\n\tremote: require('./remote'),\n\treset: require('./reset'),\n\ttag: require('./tag'),\n\tunadded: require('./unadded'),\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const { resolve } = require('path');\nconst exec = require('async-execute');\nconst exist = require('@does/exist');\n\n/**\n * Create and push a git tag with the last commit message\n * @param  {String} path Path to file\n * @return {Date}\n */\nmodule.exports = async function(path) {\n\tif (!path || typeof path !== 'string') {\n\t\tthrow new TypeError(`string was expected, instead got ${path}`);\n\t}\n\n\tconst absolute = resolve(path);\n\n\tif (!(await exist(absolute))) {\n\t\tthrow new Error(`Could not find file at path \"${absolute}\"`);\n\t}\n\n\tconst ts = await exec(`git log -1 --format=\"%at\" -- ${path}`);\n\n\treturn new Date(Number(ts) * 1000);\n};\n"}, {"role": "assistant", "content": "const { resolve } = require('path');\nconst exist = require('@does/exist');\nconst spawn = require('../../helpers/spawn');\n\n/**\n * Create and push a git tag with the last commit message\n * @param  {String} path Path to file\n * @return {Date}\n */\nmodule.exports = async function(path) {\n\tif (!path || typeof path !== 'string') {\n\t\tthrow new TypeError(`string was expected, instead got ${path}`);\n\t}\n\n\tconst absolute = resolve(path);\n\n\tif (!(await exist(absolute))) {\n\t\tthrow new Error(`Could not find file at path \"${absolute}\"`);\n\t}\n\n\tconst ts = await spawn(`log -1 --format=\"%at\" -- ${path}`);\n\n\treturn new Date(Number(ts) * 1000);\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const exec = require('async-execute');\n\n/**\n * Get remote repo name and owner\n * @return {string{}}\n */\nmodule.exports = async function remote() {\n\tconst origin = await exec('git remote get-url origin');\n\tconst nosuffix = origin.replace(/\\.git$/, '');\n\tconst [ match ] = nosuffix.match(/[\\w-]*\\/[\\w-]+$/) || [ nosuffix ];\n\n\tconst [ name, owner = '' ] = match.split('/').reverse();\n\n\treturn { name, owner };\n};\n\n\n"}, {"role": "assistant", "content": "const spawn = require('../../helpers/spawn');\n\n/**\n * Get remote repo name and owner\n * @return {string{}}\n */\nmodule.exports = async function remote() {\n\tconst origin = await spawn('remote get-url origin');\n\tconst nosuffix = origin.replace(/\\.git$/, '');\n\tconst [ match ] = nosuffix.match(/[\\w-]*\\/[\\w-]+$/) || [ nosuffix ];\n\n\tconst [ name, owner = '' ] = match.split('/').reverse();\n\n\treturn { name, owner };\n};\n\n\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const exec = require('async-execute');\n\n/**\n * Reset current HEAD to the specified state\n * @param  {String|Number}  destination\n * @param  {Boolean} options.hard\n * @return {void}\n */\nmodule.exports = async function(destination, { hard = true } = {}) {\n\tif (destination && typeof destination === 'string') {\n\t\treturn await exec(`git reset ${JSON.stringify(destination)} ${hard ? '--hard' : ''}`);\n\t}\n\n\tif (destination && typeof destination === 'number') {\n\t\treturn await exec(`git reset HEAD~${Math.abs(destination)} ${hard ? '--hard' : ''}`);\n\t}\n\n\tthrow new TypeError(`No case for handling destination ${destination} (${typeof destination})`);\n};\n"}, {"role": "assistant", "content": "const spawn = require('../../helpers/spawn');\n\n/**\n * Reset current HEAD to the specified state\n * @param  {String|Number}  destination\n * @param  {Boolean} options.hard\n * @return {void}\n */\nmodule.exports = async function(destination, { hard = true } = {}) {\n\tif (destination && typeof destination === 'string') {\n\t\ttry {\n\t\t\tawait spawn(`check-ref-format ${destination}`);\n\t\t} catch (error) {\n\t\t\tthrow new RangeError('can not reset to illegal ref \"${destination}\"');\n\t\t}\n\n\t\treturn await spawn(`reset ${destination} ${hard ? '--hard' : ''}`);\n\t}\n\n\tif (destination && typeof destination === 'number') {\n\t\treturn await spawn(`reset HEAD~${Math.abs(destination)} ${hard ? '--hard' : ''}`);\n\t}\n\n\tthrow new TypeError(`No case for handling destination ${destination} (${typeof destination})`);\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const exec = require('async-execute');\n\n/**\n * Create and push a git tag with the last commit message\n * @param  {String} tag\n * @return {void}\n */\nmodule.exports = async function(tag) {\n\tif (!tag || ![ 'string', 'number' ].includes(typeof tag)) {\n\t\tthrow new TypeError(`string was expected, instead got ${tag}`);\n\t}\n\n\tconst { message, author, email } = this;\n\n\tawait Promise.all([\n\t\texec(`git config user.name \"${await author}\"`),\n\t\texec(`git config user.email \"${await email}\"`),\n\t]);\n\tawait exec(`git tag -a ${JSON.stringify(tag)} -m \"${await message}\"`);\n\tawait exec(`git push origin ${JSON.stringify(`refs/tags/${tag}`)}`);\n};\n"}, {"role": "assistant", "content": "const spawn = require('../../helpers/spawn');\n\n/**\n * Create and push a git tag with the last commit message\n * @param  {String} tag\n * @return {void}\n */\nmodule.exports = async function(tag) {\n\tif (!tag || ![ 'string', 'number' ].includes(typeof tag)) {\n\t\tthrow new TypeError(`string was expected, instead got ${tag}`);\n\t}\n\n\tconst { message, author, email } = this;\n\n\tawait Promise.all([\n\t\tspawn(`config user.name \"${await author}\"`),\n\t\tspawn(`config user.email \"${await email}\"`),\n\t]);\n\tawait spawn(`tag -a ${tag} -m \"${await message}\"`);\n\tawait spawn(`push origin refs/tags/${tag}`);\n};\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const { clean, override } = abuser(__filename);\nconst dummy = {};\n\ndescribe('lib/tag', async() => {\n\tlet gitTag;\n\n\tbefore(() => {\n\t\tclean('.');\n\t\toverride('async-execute', (...args) => dummy.stub(...args));\n\n\t\tgitTag = require('.').bind({\n\t\t\tmessage: 'this is a message',\n\t\t\tauthor: 'boaty mcboatface',\n\t\t\temail: 'boaty@boat.face',\n\t\t});\n\t});\n\n\tafter(() => clean('.'));\n\n\tit('Should use a given user', async() => {\n\t\tconst lines = [];\n\t\tdummy.stub = command => lines.push(command);\n\n\t\tawait gitTag('1.1.1');\n\t\texpect(lines).to.include('git config user.name \"boaty mcboatface\"');\n\t\texpect(lines).to.include('git config user.email \"boaty@boat.face\"');\n\t});\n\n\tit('Should create a git tag with given message and push it', async() => {\n\t\tconst lines = [];\n\t\tdummy.stub = command => lines.push(command);\n\n\t\tawait gitTag('1.1.1');\n\t\texpect(lines).to.include('git tag -a \"1.1.1\" -m \"this is a message\"');\n\t\texpect(lines).to.include('git push origin \"refs/tags/1.1.1\"');\n\t});\n});\n"}, {"role": "assistant", "content": "const { clean, override } = abuser(__filename);\nconst dummy = {};\n\ndescribe('lib/tag', async() => {\n\tlet gitTag;\n\n\tbefore(() => {\n\t\tclean('.');\n\t\toverride('../../helpers/spawn', (...args) => dummy.stub(...args));\n\n\t\tgitTag = require('.').bind({\n\t\t\tmessage: 'this is a message',\n\t\t\tauthor: 'boaty mcboatface',\n\t\t\temail: 'boaty@boat.face',\n\t\t});\n\t});\n\n\tafter(() => clean('.'));\n\n\tit('Should use a given user', async() => {\n\t\tconst lines = [];\n\t\tdummy.stub = command => lines.push(command);\n\n\t\tawait gitTag('1.1.1');\n\t\texpect(lines).to.include('config user.name \"boaty mcboatface\"');\n\t\texpect(lines).to.include('config user.email \"boaty@boat.face\"');\n\t});\n\n\tit('Should create a git tag with given message and push it', async() => {\n\t\tconst lines = [];\n\t\tdummy.stub = command => lines.push(command);\n\n\t\tawait gitTag('1.1.1');\n\t\texpect(lines).to.include('tag -a 1.1.1 -m \"this is a message\"');\n\t\texpect(lines).to.include('push origin refs/tags/1.1.1');\n\t});\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const exec = require('async-execute');\n\n/**\n * List all files that would be added by \"add .\"\n * @return {string[]}\n */\nmodule.exports = async function unadded() {\n\tconst output = await exec('git add --dry-run .');\n\n\treturn output\n\t\t.split('\\n')\n\t\t.map(extract)\n\t\t.filter(Boolean)\n\t;\n};\n\n/**\n * Get the file name from the verb description\n * @param  {string} line\n * @return {string}\n *\n * @example\n * extract(\"add 'file.txt'\") // \"file.txt\"\n */\nfunction extract(line) {\n\tconst [\n\t\tverb, // eslint-disable-line no-unused-vars\n\t\t...path\n\t] = line.split(' ');\n\n\treturn path.join(' ').replace(/^'|'$/g, '').trim();\n}\n"}, {"role": "assistant", "content": "const spawn = require('../../helpers/spawn');\n\n/**\n * List all files that would be added by \"add .\"\n * @return {string[]}\n */\nmodule.exports = async function unadded() {\n\tconst output = await spawn('add --dry-run .');\n\n\treturn output\n\t\t.split('\\n')\n\t\t.map(extract)\n\t\t.filter(Boolean)\n\t;\n};\n\n/**\n * Get the file name from the verb description\n * @param  {string} line\n * @return {string}\n *\n * @example\n * extract(\"add 'file.txt'\") // \"file.txt\"\n */\nfunction extract(line) {\n\tconst [\n\t\tverb, // eslint-disable-line no-unused-vars\n\t\t...path\n\t] = line.split(' ');\n\n\treturn path.join(' ').replace(/^'|'$/g, '').trim();\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const { clean, override } = abuser(__filename);\n\ndescribe('lib/unadded', () => {\n\tlet unadded;\n\n\tbefore(() => {\n\t\tclean('.');\n\t\toverride('async-execute', () => `remove '.gitattributes'\nadd 'apps/post/index.js'\nadd 'new file.txt'\n`);\n\n\t\tunadded = require('.');\n\t});\n\n\tafter(() => clean('.'));\n\n\tit('should convert dry-run add to a file list', async() => {\n\t\tconst list = await unadded();\n\t\texpect(list).to.deep.equal([\n\t\t\t'.gitattributes',\n\t\t\t'apps/post/index.js',\n\t\t\t'new file.txt',\n\t\t]);\n\t});\n});\n"}, {"role": "assistant", "content": "const { clean, override } = abuser(__filename);\n\ndescribe('lib/unadded', () => {\n\tlet unadded;\n\n\tbefore(() => {\n\t\tclean('.');\n\t\toverride('../../helpers/spawn', () => `remove '.gitattributes'\nadd 'apps/post/index.js'\nadd 'new file.txt'\n`);\n\n\t\tunadded = require('.');\n\t});\n\n\tafter(() => clean('.'));\n\n\tit('should convert dry-run add to a file list', async() => {\n\t\tconst list = await unadded();\n\t\texpect(list).to.deep.equal([\n\t\t\t'.gitattributes',\n\t\t\t'apps/post/index.js',\n\t\t\t'new file.txt',\n\t\t]);\n\t});\n});\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "Polipo is obsolete\n==================\n\nWhen it was first written, Polipo was probably the best HTTP proxy\navailable.  Since then, the web protocols have changed, and Polipo hasn't\nkept up -- it has no support for HTTP/2.0 or the WebSocket protocol.\n\nPolipo will no longer be maintained.\n\n\nOriginal Polipo README\n======================\n\nPolipo is single-threaded, non blocking caching web proxy that has\nvery modest resource needs.  See the file INSTALL for installation\ninstructions.  See the texinfo manual (available as HTML after\ninstallation) for more information.\n\nCurrent information about Polipo can be found on the Polipo web page,\n\n    http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/\n\nFurther inquiries should be sent to the Polipo-users mailing list:\n\n    <polipo-users@lists.sourceforge.net>\n\nPlease see the Polipo web page for subscription information.\n\n\nJuliusz Chroboczek\n<jch@pps.univ-paris-diderot.fr>\n"}, {"role": "assistant", "content": "Polipo is no longer maintained\n==============================\n\nPolipo is no longer maintained.  Sorry.\n\n\nOriginal Polipo README\n======================\n\nPolipo is single-threaded, non blocking caching web proxy that has\nvery modest resource needs.  See the file INSTALL for installation\ninstructions.  See the texinfo manual (available as HTML after\ninstallation) for more information.\n\nCurrent information about Polipo can be found on the Polipo web page,\n\n    http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/\n\nFurther inquiries should be sent to the Polipo-users mailing list:\n\n    <polipo-users@lists.sourceforge.net>\n\nPlease see the Polipo web page for subscription information.\n\n\nJuliusz Chroboczek\n<jch@pps.univ-paris-diderot.fr>\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# graphql-playground-html\n\nThis package is being used by the GraphQL Playground middlewares.\n\nFor local development, you can `yarn link` this package, then use `yarn link graphql-playground-html` in the\nmiddleware you want to develop.\n"}, {"role": "assistant", "content": "# graphql-playground-html\n\n> **SECURITY WARNING:** This package and all of it's dependendents had a severe XSS Reflection attack vulnerability until version `1.6.20` of this package. You must sanitize any and all user input values to `renderPlaygroundPage()` values. If you used static values in your middlewares, including ours, you were not vulnerable to the attack.\n\nThis package is being used by the GraphQL Playground middlewares.\n\nFor local development, you can `yarn link` this package, then use `yarn link graphql-playground-html` in the\nmiddleware you want to develop.\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "const express = require(\"express\");\nconst { ApolloServer, gql } = require(\"apollo-server-express\");\nconst expressPlayground = require(\"../../dist/index\").default;\n\nconst typeDefs = gql`\n  type Query {\n    hello: String!\n  }\n  schema {\n    query: Query\n  }\n`;\nconst resolvers = {\n  Query: {\n    hello: () => \"world\"\n  }\n};\n\nconst PORT = 4000;\n\nconst server = new ApolloServer({ typeDefs, resolvers });\nconst app = express();\nserver.applyMiddleware({ app });\n\napp.get(\"/playground\", expressPlayground({ endpoint: \"/graphql\" }));\napp.listen(PORT);\n\nconsole.log(\n  `Serving the GraphQL Playground on http://localhost:${PORT}/playground`\n);\n"}, {"role": "assistant", "content": "const express = require('express')\nconst { ApolloServer, gql } = require('apollo-server-express')\nconst expressPlayground = require('../../dist/index').default\n\nconst typeDefs = gql`\n  type Query {\n    hello: String!\n  }\n  schema {\n    query: Query\n  }\n`\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n}\n\nconst PORT = 4000\n\nconst server = new ApolloServer({ typeDefs, resolvers })\nconst app = express()\nserver.applyMiddleware({ app })\n\napp.get(\n  '/playground',\n  expressPlayground({\n    endpoint: '/graphql/</script><script>alert(1)</script><script>',\n  }),\n)\napp.listen(PORT)\n\nconsole.log(\n  `Serving the GraphQL Playground on http://localhost:${PORT}/playground`,\n)\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "# graphql playground serverless example\n\n## Deploy\n```\n$ sls deploy\n```\n\n## Hosted Example\nThis example is also hosted here:\nhttps://1rp2h4rth8.execute-api.us-east-1.amazonaws.com/dev/playground\n\n"}, {"role": "assistant", "content": "# graphql playground serverless example\n\n## Deploy\n\n```\n$ sls deploy\n```\n\n## Hosted Example\n\nThis example is also hosted here:\nhttps://1rp2h4rth8.execute-api.us-east-1.amazonaws.com/dev/playground\n\nexports.playgroundHandler = lambdaPlayground({\nendpoint: '/dev',\n})\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "#!/bin/bash\n\nset -e\n\ncd packages\n\npackages=(\n  graphql-playground-react\n  graphql-playground-html\n  # graphql-playground-electron\n  graphql-playground-middleware-express\n  graphql-playground-middleware-hapi\n  graphql-playground-middleware-koa\n  graphql-playground-middleware-lambda\n)\n\nfor pkg in \"${packages[@]}\"\ndo\n  cd $pkg\n  echo \"Building ${pkg}\"\n  yarn build\n  cd ..\ndone\n"}, {"role": "assistant", "content": "#!/bin/bash\n\nset -e\n\ncd packages\n\npackages=(\n  graphql-playground-html\n  graphql-playground-react\n  # graphql-playground-electron\n  graphql-playground-middleware-express\n  graphql-playground-middleware-hapi\n  graphql-playground-middleware-koa\n  graphql-playground-middleware-lambda\n)\n\nfor pkg in \"${packages[@]}\"\ndo\n  cd $pkg\n  echo \"Building ${pkg}\"\n  yarn build\n  cd ..\ndone\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "### 1.1.1\n\nPrevious version was published with ES6 feature, now the published JS uses ES5 only\n\n### 1.1.0\n\n- Add support for special characters by using the following :\n\n```javascript\nfunction validChars(ch) {\n  return (\n    (ch >= \"a\" && ch <= \"z\") ||\n    (ch >= \"A\" && ch <= \"Z\") ||\n    ch === \"_\" ||\n    ch === \"$\" ||\n    \"\u00c0\u00c8\u00cc\u00d2\u00d9\u00e0\u00e8\u00ec\u00f2\u00f9\u00c1\u00c9\u00cd\u00d3\u00da\u00e1\u00e9\u00ed\u00f3\u00fa\u00c2\u00ca\u00ce\u00d4\u00db\u00e2\u00ea\u00ee\u00f4\u00fb\u00c3\u00d1\u00d5\u00e3\u00f1\u00f5\u00c4\u00cb\u00cf\u00d6\u00dc\u0178\u00e4\u00eb\u00ef\u00f6\u00fc\u00ff\u00df\".indexOf(ch) !== -1\n  );\n}\nevaluate = compile(\"\u00eatre_embarass\u00e9\", {\n  isIdentifierStart: validChars,\n  isIdentifierContinue: validChars\n});\n\nevaluate({ \u00eatre_embarass\u00e9: \"Ping\" });\n```\n\n### 1.0.1\n\n- Disallow access to prototype chain (CVE-2020-5219)\n\n### 1.0.0\n\n- Add support for `this` keyword to write :\n\n```javascript\nevaluate = compile(\"this + 2\")(2); // which gives 4\n```\n"}, {"role": "assistant", "content": "### 1.1.2\n\n- Disallow access to prototype chain (CVE-2021-21277)\n\n### 1.1.1\n\nPrevious version was published with ES6 feature, now the published JS uses ES5 only\n\n### 1.1.0\n\n- Add support for special characters by using the following :\n\n```javascript\nfunction validChars(ch) {\n  return (\n    (ch >= \"a\" && ch <= \"z\") ||\n    (ch >= \"A\" && ch <= \"Z\") ||\n    ch === \"_\" ||\n    ch === \"$\" ||\n    \"\u00c0\u00c8\u00cc\u00d2\u00d9\u00e0\u00e8\u00ec\u00f2\u00f9\u00c1\u00c9\u00cd\u00d3\u00da\u00e1\u00e9\u00ed\u00f3\u00fa\u00c2\u00ca\u00ce\u00d4\u00db\u00e2\u00ea\u00ee\u00f4\u00fb\u00c3\u00d1\u00d5\u00e3\u00f1\u00f5\u00c4\u00cb\u00cf\u00d6\u00dc\u0178\u00e4\u00eb\u00ef\u00f6\u00fc\u00ff\u00df\".indexOf(ch) !== -1\n  );\n}\nevaluate = compile(\"\u00eatre_embarass\u00e9\", {\n  isIdentifierStart: validChars,\n  isIdentifierContinue: validChars,\n});\n\nevaluate({ \u00eatre_embarass\u00e9: \"Ping\" });\n```\n\n### 1.0.1\n\n- Disallow access to prototype chain (CVE-2020-5219)\n\n### 1.0.0\n\n- Add support for `this` keyword to write :\n\n```javascript\nevaluate = compile(\"this + 2\")(2); // which gives 4\n```\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "node_modules\nlib/parse.js"}, {"role": "assistant", "content": "node_modules\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "4.9.0\n"}, {"role": "assistant", "content": "5.0.0\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "#!/bin/bash\n# Copyright (C) 2015 Adrien Verg\u00e9\n\nrc=0\n\n./tests/lint/eol-at-eof.sh $(git ls-files) || rc=1\n\n./tests/lint/line_length.py $(git ls-files '*.[ch]') || rc=1\n\n./tests/lint/astyle.sh $(git ls-files '*.[ch]') || rc=1\n\nexit $rc\n"}, {"role": "assistant", "content": "#!/bin/bash\n# Copyright (C) 2015 Adrien Verg\u00e9\n\nrc=0\n\n./tests/lint/eol-at-eof.sh $(git ls-files | grep -v openssl_hostname_validation) || rc=1\n\n./tests/lint/line_length.py $(git ls-files '*.[ch]' | grep -v openssl_hostname_validation) || rc=1\n\n./tests/lint/astyle.sh $(git ls-files '*.[ch]' | grep -v openssl_hostname_validation) || rc=1\n\nexit $rc\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "language: node_js\nservices: mongodb\nnode_js:\n  - v5\n  - v4\nafter_script:\n  - 'npm run coveralls'\n"}, {"role": "assistant", "content": "language: node_js\nservices: mongodb\nnode_js:\n  - v6\nafter_script:\n  - 'npm run coveralls'\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "/// <reference types=\"node\" />\nexport interface IConfigSection {\n    validate(): void;\n}\nexport declare function validate(configuration: any): void;\nexport declare function applyEnvVariables(configuration: any, envVariables: NodeJS.ProcessEnv, envPrefix?: string): void;\nexport declare function applyConfigFile(configuration: any, configFile: string): void;\nexport declare function applyCommandArgs(configuration: any, argv: string[]): void;\nexport declare function setDeepProperty(obj: any, propertyPath: string, value: any): void;\nexport declare function getDeepProperty(obj: any, propertyPath: string): any;\nexport declare function objectsAreEqual(obj1: any, obj2: any, leftOnly?: boolean): boolean;\n"}, {"role": "assistant", "content": "/// <reference types=\"node\" />\nexport interface IConfigSection {\n    validate(): void;\n}\nexport declare function validate(configuration: any): void;\nexport declare function applyEnvVariables(configuration: any, envVariables: NodeJS.ProcessEnv, envPrefix?: string): void;\nexport declare function applyConfigFile(configuration: any, configFile: string): void;\nexport declare function applyCommandArgs(configuration: any, argv: string[]): void;\nexport declare function setDeepProperty(obj: {\n    [key: string]: any;\n}, propertyPath: string, value: any): void;\nexport declare function getDeepProperty(obj: any, propertyPath: string): any;\nexport declare function objectsAreEqual(obj1: any, obj2: any, leftOnly?: boolean): boolean;\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{\n  \"name\": \"@eivifj/dot\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.0.2\",\n  \"description\": \"Get and set object properties with dot notation\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node test\"\n  },\n  \"repository\": \"eivindfjeldstad/dot\",\n  \"keywords\": [\n    \"dot\",\n    \"notation\",\n    \"properties\",\n    \"object\",\n    \"path\"\n  ],\n  \"license\": \"MIT\"\n}\n"}, {"role": "assistant", "content": "{\n  \"name\": \"@eivifj/dot\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.0.3\",\n  \"description\": \"Get and set object properties with dot notation\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node test\"\n  },\n  \"repository\": \"eivindfjeldstad/dot\",\n  \"keywords\": [\n    \"dot\",\n    \"notation\",\n    \"properties\",\n    \"object\",\n    \"path\"\n  ],\n  \"license\": \"MIT\"\n}\n"}]}
{"messages": [{"role": "system", "content": "Provide new code to fix the vulnerabilities in the code given."}, {"role": "user", "content": "{\n  \"name\": \"pixl-class\",\n  \"version\": \"1.0.2\",\n  \"description\": \"A simple module for creating classes, with inheritance and mixins.\",\n  \"author\": \"Joseph Huckaby <jhuckaby@gmail.com>\",\n  \"homepage\": \"https://github.com/jhuckaby/pixl-class\",\n  \"license\": \"MIT\",\n  \"main\": \"class.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jhuckaby/pixl-class\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jhuckaby/pixl-class/issues\"\n  },\n  \"keywords\": [\n    \"oop\",\n    \"class\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {}\n}\n"}, {"role": "assistant", "content": "{\n\t\"name\": \"pixl-class\",\n\t\"version\": \"1.0.3\",\n\t\"description\": \"A simple module for creating classes, with inheritance and mixins.\",\n\t\"author\": \"Joseph Huckaby <jhuckaby@gmail.com>\",\n\t\"homepage\": \"https://github.com/jhuckaby/pixl-class\",\n\t\"license\": \"MIT\",\n\t\"main\": \"class.js\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/jhuckaby/pixl-class\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/jhuckaby/pixl-class/issues\"\n\t},\n\t\"keywords\": [\n\t\t\"oop\",\n\t\t\"class\"\n\t],\n\t\"dependencies\": {},\n\t\"devDependencies\": {}\n}\n"}]}
